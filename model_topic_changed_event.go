/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"encoding/json"
)

// checks if the TopicChangedEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TopicChangedEvent{}

// TopicChangedEvent トピック変更イベント
type TopicChangedEvent struct {
	// 変更者UUID
	UserId string `json:"userId"`
	// 変更前トピック
	Before string `json:"before"`
	// 変更後トピック
	After string `json:"after"`
}

// NewTopicChangedEvent instantiates a new TopicChangedEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopicChangedEvent(userId string, before string, after string) *TopicChangedEvent {
	this := TopicChangedEvent{}
	this.UserId = userId
	this.Before = before
	this.After = after
	return &this
}

// NewTopicChangedEventWithDefaults instantiates a new TopicChangedEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopicChangedEventWithDefaults() *TopicChangedEvent {
	this := TopicChangedEvent{}
	return &this
}

// GetUserId returns the UserId field value
func (o *TopicChangedEvent) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *TopicChangedEvent) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *TopicChangedEvent) SetUserId(v string) {
	o.UserId = v
}

// GetBefore returns the Before field value
func (o *TopicChangedEvent) GetBefore() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Before
}

// GetBeforeOk returns a tuple with the Before field value
// and a boolean to check if the value has been set.
func (o *TopicChangedEvent) GetBeforeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Before, true
}

// SetBefore sets field value
func (o *TopicChangedEvent) SetBefore(v string) {
	o.Before = v
}

// GetAfter returns the After field value
func (o *TopicChangedEvent) GetAfter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.After
}

// GetAfterOk returns a tuple with the After field value
// and a boolean to check if the value has been set.
func (o *TopicChangedEvent) GetAfterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.After, true
}

// SetAfter sets field value
func (o *TopicChangedEvent) SetAfter(v string) {
	o.After = v
}

func (o TopicChangedEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TopicChangedEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userId"] = o.UserId
	toSerialize["before"] = o.Before
	toSerialize["after"] = o.After
	return toSerialize, nil
}

type NullableTopicChangedEvent struct {
	value *TopicChangedEvent
	isSet bool
}

func (v NullableTopicChangedEvent) Get() *TopicChangedEvent {
	return v.value
}

func (v *NullableTopicChangedEvent) Set(val *TopicChangedEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableTopicChangedEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableTopicChangedEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopicChangedEvent(val *TopicChangedEvent) *NullableTopicChangedEvent {
	return &NullableTopicChangedEvent{value: val, isSet: true}
}

func (v NullableTopicChangedEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopicChangedEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
