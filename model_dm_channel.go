/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"encoding/json"
)

// DMChannel ダイレクトメッセージチャンネル
type DMChannel struct {
	// チャンネルUUID
	Id string `json:"id"`
	// 送信先相手のUUID
	UserId string `json:"userId"`
}

// NewDMChannel instantiates a new DMChannel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDMChannel(id string, userId string) *DMChannel {
	this := DMChannel{}
	this.Id = id
	this.UserId = userId
	return &this
}

// NewDMChannelWithDefaults instantiates a new DMChannel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDMChannelWithDefaults() *DMChannel {
	this := DMChannel{}
	return &this
}

// GetId returns the Id field value
func (o *DMChannel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DMChannel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DMChannel) SetId(v string) {
	o.Id = v
}

// GetUserId returns the UserId field value
func (o *DMChannel) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *DMChannel) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *DMChannel) SetUserId(v string) {
	o.UserId = v
}

func (o DMChannel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["userId"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableDMChannel struct {
	value *DMChannel
	isSet bool
}

func (v NullableDMChannel) Get() *DMChannel {
	return v.value
}

func (v *NullableDMChannel) Set(val *DMChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableDMChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableDMChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDMChannel(val *DMChannel) *NullableDMChannel {
	return &NullableDMChannel{value: val, isSet: true}
}

func (v NullableDMChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDMChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
