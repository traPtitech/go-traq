/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ChannelTopic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelTopic{}

// ChannelTopic チャンネルトピック
type ChannelTopic struct {
	// トピック
	Topic string `json:"topic"`
}

type _ChannelTopic ChannelTopic

// NewChannelTopic instantiates a new ChannelTopic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelTopic(topic string) *ChannelTopic {
	this := ChannelTopic{}
	this.Topic = topic
	return &this
}

// NewChannelTopicWithDefaults instantiates a new ChannelTopic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelTopicWithDefaults() *ChannelTopic {
	this := ChannelTopic{}
	return &this
}

// GetTopic returns the Topic field value
func (o *ChannelTopic) GetTopic() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Topic
}

// GetTopicOk returns a tuple with the Topic field value
// and a boolean to check if the value has been set.
func (o *ChannelTopic) GetTopicOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Topic, true
}

// SetTopic sets field value
func (o *ChannelTopic) SetTopic(v string) {
	o.Topic = v
}

func (o ChannelTopic) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelTopic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["topic"] = o.Topic
	return toSerialize, nil
}

func (o *ChannelTopic) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"topic",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChannelTopic := _ChannelTopic{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChannelTopic)

	if err != nil {
		return err
	}

	*o = ChannelTopic(varChannelTopic)

	return err
}

type NullableChannelTopic struct {
	value *ChannelTopic
	isSet bool
}

func (v NullableChannelTopic) Get() *ChannelTopic {
	return v.value
}

func (v *NullableChannelTopic) Set(val *ChannelTopic) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelTopic) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelTopic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelTopic(val *ChannelTopic) *NullableChannelTopic {
	return &NullableChannelTopic{value: val, isSet: true}
}

func (v NullableChannelTopic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelTopic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
