/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
	"strings"
)

// Linger please
var (
	_ context.Context
)

// BotApiService BotApi service
type BotApiService service

type BotApiApiActivateBotRequest struct {
	ctx        context.Context
	ApiService *BotApiService
	botId      string
}

func (r BotApiApiActivateBotRequest) Execute() (*http.Response, error) {
	return r.ApiService.ActivateBotExecute(r)
}

/*
ActivateBot BOTをアクティベート

指定したBOTを有効化します。
対象のBOTの管理権限が必要です。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param botId BOTUUID
 @return BotApiApiActivateBotRequest
*/
func (a *BotApiService) ActivateBot(ctx context.Context, botId string) BotApiApiActivateBotRequest {
	return BotApiApiActivateBotRequest{
		ApiService: a,
		ctx:        ctx,
		botId:      botId,
	}
}

// Execute executes the request
func (a *BotApiService) ActivateBotExecute(r BotApiApiActivateBotRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BotApiService.ActivateBot")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bots/{botId}/actions/activate"
	localVarPath = strings.Replace(localVarPath, "{"+"botId"+"}", url.PathEscape(parameterToString(r.botId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BotApiApiChangeBotIconRequest struct {
	ctx        context.Context
	ApiService *BotApiService
	botId      string
	file       **os.File
}

// アイコン画像(1MBまでのpng, jpeg, gif)
func (r BotApiApiChangeBotIconRequest) File(file *os.File) BotApiApiChangeBotIconRequest {
	r.file = &file
	return r
}

func (r BotApiApiChangeBotIconRequest) Execute() (*http.Response, error) {
	return r.ApiService.ChangeBotIconExecute(r)
}

/*
ChangeBotIcon BOTのアイコン画像を変更

指定したBOTのアイコン画像を変更を変更します。
対象のBOTの管理権限が必要です。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param botId BOTUUID
 @return BotApiApiChangeBotIconRequest
*/
func (a *BotApiService) ChangeBotIcon(ctx context.Context, botId string) BotApiApiChangeBotIconRequest {
	return BotApiApiChangeBotIconRequest{
		ApiService: a,
		ctx:        ctx,
		botId:      botId,
	}
}

// Execute executes the request
func (a *BotApiService) ChangeBotIconExecute(r BotApiApiChangeBotIconRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BotApiService.ChangeBotIcon")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bots/{botId}/icon"
	localVarPath = strings.Replace(localVarPath, "{"+"botId"+"}", url.PathEscape(parameterToString(r.botId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.file == nil {
		return nil, reportError("file is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName string
	var fileLocalVarFileBytes []byte

	fileLocalVarFormFileName = "file"

	fileLocalVarFile := *r.file
	if fileLocalVarFile != nil {
		fbs, _ := ioutil.ReadAll(fileLocalVarFile)
		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
	}
	formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BotApiApiConnectBotWSRequest struct {
	ctx        context.Context
	ApiService *BotApiService
}

func (r BotApiApiConnectBotWSRequest) Execute() (*http.Response, error) {
	return r.ApiService.ConnectBotWSExecute(r)
}

/*
ConnectBotWS WebSocket Mode BOT用通知ストリームに接続します

# BOT WebSocketプロトコル

## 送信

`コマンド:引数1:引数2:...` のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できます。

### `rtcstate`コマンド
自分のWebRTC状態を変更します。
他のコネクションが既に状態を保持している場合、変更することができません。

`rtcstate:{チャンネルID}:({状態}:{セッションID})*`

チャンネルIDにnullもしくは空文字を指定するか、状態にnullもしくは空文字を指定した場合、WebRTC状態はリセットされます。

`rtcstate:null`, `rtcstate:`, `rtcstate:channelId:null`, `rtcstate:channelId:`

コネクションが切断された場合、自分のWebRTC状態はリセットされます。

## 受信

TextMessageとして各種イベントが`type`、`reqId`、`body`を持つJSONとして非同期に送られます。
`body`の内容はHTTP Modeの場合のRequest Bodyと同様です。
例外として`ERROR`イベントは`reqId`を持ちません。

例: PINGイベント
`{"type":"PING","reqId":"requestId","body":{"eventTime":"2019-05-07T04:50:48.582586882Z"}}`

### `ERROR`

コマンドの引数が不正などの理由でコマンドが受理されなかった場合に送られます。
非同期に送られるため、必ずしもコマンドとの対応関係を確定できないことに注意してください。
本番環境ではERRORが送られないようにすることが望ましいです。

`{"type":"ERROR","body":"message"}`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BotApiApiConnectBotWSRequest
*/
func (a *BotApiService) ConnectBotWS(ctx context.Context) BotApiApiConnectBotWSRequest {
	return BotApiApiConnectBotWSRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *BotApiService) ConnectBotWSExecute(r BotApiApiConnectBotWSRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BotApiService.ConnectBotWS")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bots/ws"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BotApiApiCreateBotRequest struct {
	ctx            context.Context
	ApiService     *BotApiService
	postBotRequest *PostBotRequest
}

func (r BotApiApiCreateBotRequest) PostBotRequest(postBotRequest PostBotRequest) BotApiApiCreateBotRequest {
	r.postBotRequest = &postBotRequest
	return r
}

func (r BotApiApiCreateBotRequest) Execute() (*BotDetail, *http.Response, error) {
	return r.ApiService.CreateBotExecute(r)
}

/*
CreateBot BOTを作成

BOTを作成します。
作成後に購読イベントの設定を行う必要があります。
さらにHTTP Modeの場合はアクティベーションを行う必要があります。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BotApiApiCreateBotRequest
*/
func (a *BotApiService) CreateBot(ctx context.Context) BotApiApiCreateBotRequest {
	return BotApiApiCreateBotRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return BotDetail
func (a *BotApiService) CreateBotExecute(r BotApiApiCreateBotRequest) (*BotDetail, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BotDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BotApiService.CreateBot")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bots"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postBotRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BotApiApiDeleteBotRequest struct {
	ctx        context.Context
	ApiService *BotApiService
	botId      string
}

func (r BotApiApiDeleteBotRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteBotExecute(r)
}

/*
DeleteBot BOTを削除

指定したBOTを削除します。
対象のBOTの管理権限が必要です。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param botId BOTUUID
 @return BotApiApiDeleteBotRequest
*/
func (a *BotApiService) DeleteBot(ctx context.Context, botId string) BotApiApiDeleteBotRequest {
	return BotApiApiDeleteBotRequest{
		ApiService: a,
		ctx:        ctx,
		botId:      botId,
	}
}

// Execute executes the request
func (a *BotApiService) DeleteBotExecute(r BotApiApiDeleteBotRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BotApiService.DeleteBot")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bots/{botId}"
	localVarPath = strings.Replace(localVarPath, "{"+"botId"+"}", url.PathEscape(parameterToString(r.botId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BotApiApiEditBotRequest struct {
	ctx             context.Context
	ApiService      *BotApiService
	botId           string
	patchBotRequest *PatchBotRequest
}

func (r BotApiApiEditBotRequest) PatchBotRequest(patchBotRequest PatchBotRequest) BotApiApiEditBotRequest {
	r.patchBotRequest = &patchBotRequest
	return r
}

func (r BotApiApiEditBotRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditBotExecute(r)
}

/*
EditBot BOT情報を変更

指定したBOTの情報を変更します。
対象のBOTの管理権限が必要です。
BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param botId BOTUUID
 @return BotApiApiEditBotRequest
*/
func (a *BotApiService) EditBot(ctx context.Context, botId string) BotApiApiEditBotRequest {
	return BotApiApiEditBotRequest{
		ApiService: a,
		ctx:        ctx,
		botId:      botId,
	}
}

// Execute executes the request
func (a *BotApiService) EditBotExecute(r BotApiApiEditBotRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BotApiService.EditBot")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bots/{botId}"
	localVarPath = strings.Replace(localVarPath, "{"+"botId"+"}", url.PathEscape(parameterToString(r.botId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchBotRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BotApiApiGetBotRequest struct {
	ctx        context.Context
	ApiService *BotApiService
	botId      string
	detail     *bool
}

// 詳細情報を含めるかどうか
func (r BotApiApiGetBotRequest) Detail(detail bool) BotApiApiGetBotRequest {
	r.detail = &detail
	return r
}

func (r BotApiApiGetBotRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.GetBotExecute(r)
}

/*
GetBot BOT情報を取得

指定したBOTのBOT情報を取得します。
BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param botId BOTUUID
 @return BotApiApiGetBotRequest
*/
func (a *BotApiService) GetBot(ctx context.Context, botId string) BotApiApiGetBotRequest {
	return BotApiApiGetBotRequest{
		ApiService: a,
		ctx:        ctx,
		botId:      botId,
	}
}

// Execute executes the request
//  @return OneOf: Bot, BotDetail
func (a *BotApiService) GetBotExecute(r BotApiApiGetBotRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BotApiService.GetBot")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bots/{botId}"
	localVarPath = strings.Replace(localVarPath, "{"+"botId"+"}", url.PathEscape(parameterToString(r.botId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.detail != nil {
		localVarQueryParams.Add("detail", parameterToString(*r.detail, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BotApiApiGetBotIconRequest struct {
	ctx        context.Context
	ApiService *BotApiService
	botId      string
}

func (r BotApiApiGetBotIconRequest) Execute() (**os.File, *http.Response, error) {
	return r.ApiService.GetBotIconExecute(r)
}

/*
GetBotIcon BOTのアイコン画像を取得

指定したBOTのアイコン画像を取得を取得します。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param botId BOTUUID
 @return BotApiApiGetBotIconRequest
*/
func (a *BotApiService) GetBotIcon(ctx context.Context, botId string) BotApiApiGetBotIconRequest {
	return BotApiApiGetBotIconRequest{
		ApiService: a,
		ctx:        ctx,
		botId:      botId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *BotApiService) GetBotIconExecute(r BotApiApiGetBotIconRequest) (**os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue **os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BotApiService.GetBotIcon")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bots/{botId}/icon"
	localVarPath = strings.Replace(localVarPath, "{"+"botId"+"}", url.PathEscape(parameterToString(r.botId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/jpeg", "image/gif", "image/png"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BotApiApiGetBotLogsRequest struct {
	ctx        context.Context
	ApiService *BotApiService
	botId      string
	limit      *int32
	offset     *int32
}

// 取得する件数
func (r BotApiApiGetBotLogsRequest) Limit(limit int32) BotApiApiGetBotLogsRequest {
	r.limit = &limit
	return r
}

// 取得するオフセット
func (r BotApiApiGetBotLogsRequest) Offset(offset int32) BotApiApiGetBotLogsRequest {
	r.offset = &offset
	return r
}

func (r BotApiApiGetBotLogsRequest) Execute() ([]BotEventLog, *http.Response, error) {
	return r.ApiService.GetBotLogsExecute(r)
}

/*
GetBotLogs BOTのイベントログを取得

指定したBOTのイベントログを取得します。
対象のBOTの管理権限が必要です。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param botId BOTUUID
 @return BotApiApiGetBotLogsRequest
*/
func (a *BotApiService) GetBotLogs(ctx context.Context, botId string) BotApiApiGetBotLogsRequest {
	return BotApiApiGetBotLogsRequest{
		ApiService: a,
		ctx:        ctx,
		botId:      botId,
	}
}

// Execute executes the request
//  @return []BotEventLog
func (a *BotApiService) GetBotLogsExecute(r BotApiApiGetBotLogsRequest) ([]BotEventLog, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BotEventLog
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BotApiService.GetBotLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bots/{botId}/logs"
	localVarPath = strings.Replace(localVarPath, "{"+"botId"+"}", url.PathEscape(parameterToString(r.botId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BotApiApiGetBotsRequest struct {
	ctx        context.Context
	ApiService *BotApiService
	all        *bool
}

// 全てのBOTを取得するかどうか
func (r BotApiApiGetBotsRequest) All(all bool) BotApiApiGetBotsRequest {
	r.all = &all
	return r
}

func (r BotApiApiGetBotsRequest) Execute() ([]Bot, *http.Response, error) {
	return r.ApiService.GetBotsExecute(r)
}

/*
GetBots BOTリストを取得

BOT情報のリストを取得します。
allを指定しない場合、自分が開発者のBOTのみを返します。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BotApiApiGetBotsRequest
*/
func (a *BotApiService) GetBots(ctx context.Context) BotApiApiGetBotsRequest {
	return BotApiApiGetBotsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return []Bot
func (a *BotApiService) GetBotsExecute(r BotApiApiGetBotsRequest) ([]Bot, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Bot
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BotApiService.GetBots")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bots"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.all != nil {
		localVarQueryParams.Add("all", parameterToString(*r.all, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BotApiApiGetChannelBotsRequest struct {
	ctx        context.Context
	ApiService *BotApiService
	channelId  string
}

func (r BotApiApiGetChannelBotsRequest) Execute() ([]BotUser, *http.Response, error) {
	return r.ApiService.GetChannelBotsExecute(r)
}

/*
GetChannelBots チャンネル参加中のBOTのリストを取得

指定したチャンネルに参加しているBOTのリストを取得します。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param channelId チャンネルUUID
 @return BotApiApiGetChannelBotsRequest
*/
func (a *BotApiService) GetChannelBots(ctx context.Context, channelId string) BotApiApiGetChannelBotsRequest {
	return BotApiApiGetChannelBotsRequest{
		ApiService: a,
		ctx:        ctx,
		channelId:  channelId,
	}
}

// Execute executes the request
//  @return []BotUser
func (a *BotApiService) GetChannelBotsExecute(r BotApiApiGetChannelBotsRequest) ([]BotUser, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BotUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BotApiService.GetChannelBots")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/channels/{channelId}/bots"
	localVarPath = strings.Replace(localVarPath, "{"+"channelId"+"}", url.PathEscape(parameterToString(r.channelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BotApiApiInactivateBotRequest struct {
	ctx        context.Context
	ApiService *BotApiService
	botId      string
}

func (r BotApiApiInactivateBotRequest) Execute() (*http.Response, error) {
	return r.ApiService.InactivateBotExecute(r)
}

/*
InactivateBot BOTをインアクティベート

指定したBOTを無効化します。対象のBOTの管理権限が必要です。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param botId BOTUUID
 @return BotApiApiInactivateBotRequest
*/
func (a *BotApiService) InactivateBot(ctx context.Context, botId string) BotApiApiInactivateBotRequest {
	return BotApiApiInactivateBotRequest{
		ApiService: a,
		ctx:        ctx,
		botId:      botId,
	}
}

// Execute executes the request
func (a *BotApiService) InactivateBotExecute(r BotApiApiInactivateBotRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BotApiService.InactivateBot")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bots/{botId}/actions/inactivate"
	localVarPath = strings.Replace(localVarPath, "{"+"botId"+"}", url.PathEscape(parameterToString(r.botId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BotApiApiLetBotJoinChannelRequest struct {
	ctx                      context.Context
	ApiService               *BotApiService
	botId                    string
	postBotActionJoinRequest *PostBotActionJoinRequest
}

func (r BotApiApiLetBotJoinChannelRequest) PostBotActionJoinRequest(postBotActionJoinRequest PostBotActionJoinRequest) BotApiApiLetBotJoinChannelRequest {
	r.postBotActionJoinRequest = &postBotActionJoinRequest
	return r
}

func (r BotApiApiLetBotJoinChannelRequest) Execute() (*http.Response, error) {
	return r.ApiService.LetBotJoinChannelExecute(r)
}

/*
LetBotJoinChannel BOTをチャンネルに参加させる

指定したBOTを指定したチャンネルに参加させます。
チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。
対象のBOTの管理権限が必要です。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param botId BOTUUID
 @return BotApiApiLetBotJoinChannelRequest
*/
func (a *BotApiService) LetBotJoinChannel(ctx context.Context, botId string) BotApiApiLetBotJoinChannelRequest {
	return BotApiApiLetBotJoinChannelRequest{
		ApiService: a,
		ctx:        ctx,
		botId:      botId,
	}
}

// Execute executes the request
func (a *BotApiService) LetBotJoinChannelExecute(r BotApiApiLetBotJoinChannelRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BotApiService.LetBotJoinChannel")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bots/{botId}/actions/join"
	localVarPath = strings.Replace(localVarPath, "{"+"botId"+"}", url.PathEscape(parameterToString(r.botId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postBotActionJoinRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BotApiApiLetBotLeaveChannelRequest struct {
	ctx                       context.Context
	ApiService                *BotApiService
	botId                     string
	postBotActionLeaveRequest *PostBotActionLeaveRequest
}

func (r BotApiApiLetBotLeaveChannelRequest) PostBotActionLeaveRequest(postBotActionLeaveRequest PostBotActionLeaveRequest) BotApiApiLetBotLeaveChannelRequest {
	r.postBotActionLeaveRequest = &postBotActionLeaveRequest
	return r
}

func (r BotApiApiLetBotLeaveChannelRequest) Execute() (*http.Response, error) {
	return r.ApiService.LetBotLeaveChannelExecute(r)
}

/*
LetBotLeaveChannel BOTをチャンネルから退出させる

指定したBOTを指定したチャンネルから退出させます。
対象のBOTの管理権限が必要です。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param botId BOTUUID
 @return BotApiApiLetBotLeaveChannelRequest
*/
func (a *BotApiService) LetBotLeaveChannel(ctx context.Context, botId string) BotApiApiLetBotLeaveChannelRequest {
	return BotApiApiLetBotLeaveChannelRequest{
		ApiService: a,
		ctx:        ctx,
		botId:      botId,
	}
}

// Execute executes the request
func (a *BotApiService) LetBotLeaveChannelExecute(r BotApiApiLetBotLeaveChannelRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BotApiService.LetBotLeaveChannel")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bots/{botId}/actions/leave"
	localVarPath = strings.Replace(localVarPath, "{"+"botId"+"}", url.PathEscape(parameterToString(r.botId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postBotActionLeaveRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BotApiApiReissueBotRequest struct {
	ctx        context.Context
	ApiService *BotApiService
	botId      string
}

func (r BotApiApiReissueBotRequest) Execute() (*BotTokens, *http.Response, error) {
	return r.ApiService.ReissueBotExecute(r)
}

/*
ReissueBot BOTのトークンを再発行

指定したBOTの現在の各種トークンを無効化し、再発行を行います。
対象のBOTの管理権限が必要です。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param botId BOTUUID
 @return BotApiApiReissueBotRequest
*/
func (a *BotApiService) ReissueBot(ctx context.Context, botId string) BotApiApiReissueBotRequest {
	return BotApiApiReissueBotRequest{
		ApiService: a,
		ctx:        ctx,
		botId:      botId,
	}
}

// Execute executes the request
//  @return BotTokens
func (a *BotApiService) ReissueBotExecute(r BotApiApiReissueBotRequest) (*BotTokens, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BotTokens
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BotApiService.ReissueBot")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bots/{botId}/actions/reissue"
	localVarPath = strings.Replace(localVarPath, "{"+"botId"+"}", url.PathEscape(parameterToString(r.botId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
