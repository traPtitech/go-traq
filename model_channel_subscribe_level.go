/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"encoding/json"
	"fmt"
)

// ChannelSubscribeLevel チャンネル購読レベル 0：無し 1：未読管理 2：未読管理+通知
type ChannelSubscribeLevel int32

// List of ChannelSubscribeLevel
const (
	CHANNELSUBSCRIBELEVEL_none       ChannelSubscribeLevel = 0
	CHANNELSUBSCRIBELEVEL_subscribed ChannelSubscribeLevel = 1
	CHANNELSUBSCRIBELEVEL_notified   ChannelSubscribeLevel = 2
)

// All allowed values of ChannelSubscribeLevel enum
var AllowedChannelSubscribeLevelEnumValues = []ChannelSubscribeLevel{
	0,
	1,
	2,
}

func (v *ChannelSubscribeLevel) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChannelSubscribeLevel(value)
	for _, existing := range AllowedChannelSubscribeLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChannelSubscribeLevel", value)
}

// NewChannelSubscribeLevelFromValue returns a pointer to a valid ChannelSubscribeLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChannelSubscribeLevelFromValue(v int32) (*ChannelSubscribeLevel, error) {
	ev := ChannelSubscribeLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChannelSubscribeLevel: valid values are %v", v, AllowedChannelSubscribeLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChannelSubscribeLevel) IsValid() bool {
	for _, existing := range AllowedChannelSubscribeLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChannelSubscribeLevel value
func (v ChannelSubscribeLevel) Ptr() *ChannelSubscribeLevel {
	return &v
}

type NullableChannelSubscribeLevel struct {
	value *ChannelSubscribeLevel
	isSet bool
}

func (v NullableChannelSubscribeLevel) Get() *ChannelSubscribeLevel {
	return v.value
}

func (v *NullableChannelSubscribeLevel) Set(val *ChannelSubscribeLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelSubscribeLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelSubscribeLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelSubscribeLevel(val *ChannelSubscribeLevel) *NullableChannelSubscribeLevel {
	return &NullableChannelSubscribeLevel{value: val, isSet: true}
}

func (v NullableChannelSubscribeLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelSubscribeLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
