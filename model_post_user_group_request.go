/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PostUserGroupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostUserGroupRequest{}

// PostUserGroupRequest ユーザーグループ作成リクエスト
type PostUserGroupRequest struct {
	// グループ名
	Name string `json:"name"`
	// 説明
	Description string `json:"description"`
	// グループタイプ
	Type string `json:"type"`
}

type _PostUserGroupRequest PostUserGroupRequest

// NewPostUserGroupRequest instantiates a new PostUserGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostUserGroupRequest(name string, description string, type_ string) *PostUserGroupRequest {
	this := PostUserGroupRequest{}
	this.Name = name
	this.Description = description
	this.Type = type_
	return &this
}

// NewPostUserGroupRequestWithDefaults instantiates a new PostUserGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostUserGroupRequestWithDefaults() *PostUserGroupRequest {
	this := PostUserGroupRequest{}
	return &this
}

// GetName returns the Name field value
func (o *PostUserGroupRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PostUserGroupRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PostUserGroupRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *PostUserGroupRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *PostUserGroupRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *PostUserGroupRequest) SetDescription(v string) {
	o.Description = v
}

// GetType returns the Type field value
func (o *PostUserGroupRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PostUserGroupRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PostUserGroupRequest) SetType(v string) {
	o.Type = v
}

func (o PostUserGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostUserGroupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *PostUserGroupRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostUserGroupRequest := _PostUserGroupRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostUserGroupRequest)

	if err != nil {
		return err
	}

	*o = PostUserGroupRequest(varPostUserGroupRequest)

	return err
}

type NullablePostUserGroupRequest struct {
	value *PostUserGroupRequest
	isSet bool
}

func (v NullablePostUserGroupRequest) Get() *PostUserGroupRequest {
	return v.value
}

func (v *NullablePostUserGroupRequest) Set(val *PostUserGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostUserGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostUserGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostUserGroupRequest(val *PostUserGroupRequest) *NullablePostUserGroupRequest {
	return &NullablePostUserGroupRequest{value: val, isSet: true}
}

func (v NullablePostUserGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostUserGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
