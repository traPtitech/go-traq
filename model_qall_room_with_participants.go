/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the QallRoomWithParticipants type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QallRoomWithParticipants{}

// QallRoomWithParticipants struct for QallRoomWithParticipants
type QallRoomWithParticipants struct {
	// ルームのID
	RoomId       string            `json:"roomId"`
	Participants []QallParticipant `json:"participants"`
	// ウェビナールームかどうか
	IsWebinar *bool `json:"isWebinar,omitempty"`
	// ルームに関連付けられたカスタム属性
	Metadata *string `json:"metadata,omitempty"`
}

type _QallRoomWithParticipants QallRoomWithParticipants

// NewQallRoomWithParticipants instantiates a new QallRoomWithParticipants object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQallRoomWithParticipants(roomId string, participants []QallParticipant) *QallRoomWithParticipants {
	this := QallRoomWithParticipants{}
	this.RoomId = roomId
	this.Participants = participants
	return &this
}

// NewQallRoomWithParticipantsWithDefaults instantiates a new QallRoomWithParticipants object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQallRoomWithParticipantsWithDefaults() *QallRoomWithParticipants {
	this := QallRoomWithParticipants{}
	return &this
}

// GetRoomId returns the RoomId field value
func (o *QallRoomWithParticipants) GetRoomId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoomId
}

// GetRoomIdOk returns a tuple with the RoomId field value
// and a boolean to check if the value has been set.
func (o *QallRoomWithParticipants) GetRoomIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoomId, true
}

// SetRoomId sets field value
func (o *QallRoomWithParticipants) SetRoomId(v string) {
	o.RoomId = v
}

// GetParticipants returns the Participants field value
func (o *QallRoomWithParticipants) GetParticipants() []QallParticipant {
	if o == nil {
		var ret []QallParticipant
		return ret
	}

	return o.Participants
}

// GetParticipantsOk returns a tuple with the Participants field value
// and a boolean to check if the value has been set.
func (o *QallRoomWithParticipants) GetParticipantsOk() ([]QallParticipant, bool) {
	if o == nil {
		return nil, false
	}
	return o.Participants, true
}

// SetParticipants sets field value
func (o *QallRoomWithParticipants) SetParticipants(v []QallParticipant) {
	o.Participants = v
}

// GetIsWebinar returns the IsWebinar field value if set, zero value otherwise.
func (o *QallRoomWithParticipants) GetIsWebinar() bool {
	if o == nil || IsNil(o.IsWebinar) {
		var ret bool
		return ret
	}
	return *o.IsWebinar
}

// GetIsWebinarOk returns a tuple with the IsWebinar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QallRoomWithParticipants) GetIsWebinarOk() (*bool, bool) {
	if o == nil || IsNil(o.IsWebinar) {
		return nil, false
	}
	return o.IsWebinar, true
}

// HasIsWebinar returns a boolean if a field has been set.
func (o *QallRoomWithParticipants) HasIsWebinar() bool {
	if o != nil && !IsNil(o.IsWebinar) {
		return true
	}

	return false
}

// SetIsWebinar gets a reference to the given bool and assigns it to the IsWebinar field.
func (o *QallRoomWithParticipants) SetIsWebinar(v bool) {
	o.IsWebinar = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *QallRoomWithParticipants) GetMetadata() string {
	if o == nil || IsNil(o.Metadata) {
		var ret string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QallRoomWithParticipants) GetMetadataOk() (*string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *QallRoomWithParticipants) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given string and assigns it to the Metadata field.
func (o *QallRoomWithParticipants) SetMetadata(v string) {
	o.Metadata = &v
}

func (o QallRoomWithParticipants) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QallRoomWithParticipants) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["roomId"] = o.RoomId
	toSerialize["participants"] = o.Participants
	if !IsNil(o.IsWebinar) {
		toSerialize["isWebinar"] = o.IsWebinar
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

func (o *QallRoomWithParticipants) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"roomId",
		"participants",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQallRoomWithParticipants := _QallRoomWithParticipants{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQallRoomWithParticipants)

	if err != nil {
		return err
	}

	*o = QallRoomWithParticipants(varQallRoomWithParticipants)

	return err
}

type NullableQallRoomWithParticipants struct {
	value *QallRoomWithParticipants
	isSet bool
}

func (v NullableQallRoomWithParticipants) Get() *QallRoomWithParticipants {
	return v.value
}

func (v *NullableQallRoomWithParticipants) Set(val *QallRoomWithParticipants) {
	v.value = val
	v.isSet = true
}

func (v NullableQallRoomWithParticipants) IsSet() bool {
	return v.isSet
}

func (v *NullableQallRoomWithParticipants) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQallRoomWithParticipants(val *QallRoomWithParticipants) *NullableQallRoomWithParticipants {
	return &NullableQallRoomWithParticipants{value: val, isSet: true}
}

func (v NullableQallRoomWithParticipants) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQallRoomWithParticipants) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
