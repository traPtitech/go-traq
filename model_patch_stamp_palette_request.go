/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"encoding/json"
)

// checks if the PatchStampPaletteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchStampPaletteRequest{}

// PatchStampPaletteRequest スタンプパレット情報変更リクエスト
type PatchStampPaletteRequest struct {
	// パレット名
	Name *string `json:"name,omitempty"`
	// 説明
	Description *string `json:"description,omitempty"`
	// パレット内のスタンプUUIDの配列
	Stamps []string `json:"stamps,omitempty"`
}

// NewPatchStampPaletteRequest instantiates a new PatchStampPaletteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchStampPaletteRequest() *PatchStampPaletteRequest {
	this := PatchStampPaletteRequest{}
	return &this
}

// NewPatchStampPaletteRequestWithDefaults instantiates a new PatchStampPaletteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchStampPaletteRequestWithDefaults() *PatchStampPaletteRequest {
	this := PatchStampPaletteRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchStampPaletteRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchStampPaletteRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchStampPaletteRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchStampPaletteRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PatchStampPaletteRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchStampPaletteRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PatchStampPaletteRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PatchStampPaletteRequest) SetDescription(v string) {
	o.Description = &v
}

// GetStamps returns the Stamps field value if set, zero value otherwise.
func (o *PatchStampPaletteRequest) GetStamps() []string {
	if o == nil || IsNil(o.Stamps) {
		var ret []string
		return ret
	}
	return o.Stamps
}

// GetStampsOk returns a tuple with the Stamps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchStampPaletteRequest) GetStampsOk() ([]string, bool) {
	if o == nil || IsNil(o.Stamps) {
		return nil, false
	}
	return o.Stamps, true
}

// HasStamps returns a boolean if a field has been set.
func (o *PatchStampPaletteRequest) HasStamps() bool {
	if o != nil && !IsNil(o.Stamps) {
		return true
	}

	return false
}

// SetStamps gets a reference to the given []string and assigns it to the Stamps field.
func (o *PatchStampPaletteRequest) SetStamps(v []string) {
	o.Stamps = v
}

func (o PatchStampPaletteRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchStampPaletteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Stamps) {
		toSerialize["stamps"] = o.Stamps
	}
	return toSerialize, nil
}

type NullablePatchStampPaletteRequest struct {
	value *PatchStampPaletteRequest
	isSet bool
}

func (v NullablePatchStampPaletteRequest) Get() *PatchStampPaletteRequest {
	return v.value
}

func (v *NullablePatchStampPaletteRequest) Set(val *PatchStampPaletteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchStampPaletteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchStampPaletteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchStampPaletteRequest(val *PatchStampPaletteRequest) *NullablePatchStampPaletteRequest {
	return &NullablePatchStampPaletteRequest{value: val, isSet: true}
}

func (v NullablePatchStampPaletteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchStampPaletteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
