/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VersionFlags type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionFlags{}

// VersionFlags struct for VersionFlags
type VersionFlags struct {
	// 有効な外部ログインプロバイダ
	ExternalLogin []string `json:"externalLogin"`
	// ユーザーが自身で新規登録(POST /api/v3/users)可能か
	SignUpAllowed bool `json:"signUpAllowed"`
}

type _VersionFlags VersionFlags

// NewVersionFlags instantiates a new VersionFlags object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionFlags(externalLogin []string, signUpAllowed bool) *VersionFlags {
	this := VersionFlags{}
	this.ExternalLogin = externalLogin
	this.SignUpAllowed = signUpAllowed
	return &this
}

// NewVersionFlagsWithDefaults instantiates a new VersionFlags object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionFlagsWithDefaults() *VersionFlags {
	this := VersionFlags{}
	return &this
}

// GetExternalLogin returns the ExternalLogin field value
func (o *VersionFlags) GetExternalLogin() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ExternalLogin
}

// GetExternalLoginOk returns a tuple with the ExternalLogin field value
// and a boolean to check if the value has been set.
func (o *VersionFlags) GetExternalLoginOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalLogin, true
}

// SetExternalLogin sets field value
func (o *VersionFlags) SetExternalLogin(v []string) {
	o.ExternalLogin = v
}

// GetSignUpAllowed returns the SignUpAllowed field value
func (o *VersionFlags) GetSignUpAllowed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SignUpAllowed
}

// GetSignUpAllowedOk returns a tuple with the SignUpAllowed field value
// and a boolean to check if the value has been set.
func (o *VersionFlags) GetSignUpAllowedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignUpAllowed, true
}

// SetSignUpAllowed sets field value
func (o *VersionFlags) SetSignUpAllowed(v bool) {
	o.SignUpAllowed = v
}

func (o VersionFlags) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionFlags) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["externalLogin"] = o.ExternalLogin
	toSerialize["signUpAllowed"] = o.SignUpAllowed
	return toSerialize, nil
}

func (o *VersionFlags) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"externalLogin",
		"signUpAllowed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVersionFlags := _VersionFlags{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVersionFlags)

	if err != nil {
		return err
	}

	*o = VersionFlags(varVersionFlags)

	return err
}

type NullableVersionFlags struct {
	value *VersionFlags
	isSet bool
}

func (v NullableVersionFlags) Get() *VersionFlags {
	return v.value
}

func (v *NullableVersionFlags) Set(val *VersionFlags) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionFlags) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionFlags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionFlags(val *VersionFlags) *NullableVersionFlags {
	return &NullableVersionFlags{value: val, isSet: true}
}

func (v NullableVersionFlags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionFlags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
