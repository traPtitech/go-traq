/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"encoding/json"
	"fmt"
)

// ThumbnailType サムネイル画像のタイプ
type ThumbnailType string

// List of ThumbnailType
const (
	THUMBNAILTYPE_IMAGE    ThumbnailType = "image"
	THUMBNAILTYPE_WAVEFORM ThumbnailType = "waveform"
)

// All allowed values of ThumbnailType enum
var AllowedThumbnailTypeEnumValues = []ThumbnailType{
	"image",
	"waveform",
}

func (v *ThumbnailType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ThumbnailType(value)
	for _, existing := range AllowedThumbnailTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ThumbnailType", value)
}

// NewThumbnailTypeFromValue returns a pointer to a valid ThumbnailType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewThumbnailTypeFromValue(v string) (*ThumbnailType, error) {
	ev := ThumbnailType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ThumbnailType: valid values are %v", v, AllowedThumbnailTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ThumbnailType) IsValid() bool {
	for _, existing := range AllowedThumbnailTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ThumbnailType value
func (v ThumbnailType) Ptr() *ThumbnailType {
	return &v
}

type NullableThumbnailType struct {
	value *ThumbnailType
	isSet bool
}

func (v NullableThumbnailType) Get() *ThumbnailType {
	return v.value
}

func (v *NullableThumbnailType) Set(val *ThumbnailType) {
	v.value = val
	v.isSet = true
}

func (v NullableThumbnailType) IsSet() bool {
	return v.isSet
}

func (v *NullableThumbnailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThumbnailType(val *ThumbnailType) *NullableThumbnailType {
	return &NullableThumbnailType{value: val, isSet: true}
}

func (v NullableThumbnailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThumbnailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
