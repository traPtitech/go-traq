/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ThumbnailInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThumbnailInfo{}

// ThumbnailInfo struct for ThumbnailInfo
type ThumbnailInfo struct {
	Type ThumbnailType `json:"type"`
	// MIMEタイプ
	Mime string `json:"mime"`
	// サムネイル幅
	Width *int32 `json:"width,omitempty"`
	// サムネイル高さ
	Height *int32 `json:"height,omitempty"`
}

type _ThumbnailInfo ThumbnailInfo

// NewThumbnailInfo instantiates a new ThumbnailInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThumbnailInfo(type_ ThumbnailType, mime string) *ThumbnailInfo {
	this := ThumbnailInfo{}
	this.Type = type_
	this.Mime = mime
	return &this
}

// NewThumbnailInfoWithDefaults instantiates a new ThumbnailInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThumbnailInfoWithDefaults() *ThumbnailInfo {
	this := ThumbnailInfo{}
	var type_ ThumbnailType = THUMBNAILTYPE_IMAGE
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *ThumbnailInfo) GetType() ThumbnailType {
	if o == nil {
		var ret ThumbnailType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ThumbnailInfo) GetTypeOk() (*ThumbnailType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ThumbnailInfo) SetType(v ThumbnailType) {
	o.Type = v
}

// GetMime returns the Mime field value
func (o *ThumbnailInfo) GetMime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mime
}

// GetMimeOk returns a tuple with the Mime field value
// and a boolean to check if the value has been set.
func (o *ThumbnailInfo) GetMimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mime, true
}

// SetMime sets field value
func (o *ThumbnailInfo) SetMime(v string) {
	o.Mime = v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *ThumbnailInfo) GetWidth() int32 {
	if o == nil || IsNil(o.Width) {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThumbnailInfo) GetWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *ThumbnailInfo) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *ThumbnailInfo) SetWidth(v int32) {
	o.Width = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *ThumbnailInfo) GetHeight() int32 {
	if o == nil || IsNil(o.Height) {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThumbnailInfo) GetHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *ThumbnailInfo) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *ThumbnailInfo) SetHeight(v int32) {
	o.Height = &v
}

func (o ThumbnailInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThumbnailInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["mime"] = o.Mime
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	return toSerialize, nil
}

func (o *ThumbnailInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"mime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varThumbnailInfo := _ThumbnailInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varThumbnailInfo)

	if err != nil {
		return err
	}

	*o = ThumbnailInfo(varThumbnailInfo)

	return err
}

type NullableThumbnailInfo struct {
	value *ThumbnailInfo
	isSet bool
}

func (v NullableThumbnailInfo) Get() *ThumbnailInfo {
	return v.value
}

func (v *NullableThumbnailInfo) Set(val *ThumbnailInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableThumbnailInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableThumbnailInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThumbnailInfo(val *ThumbnailInfo) *NullableThumbnailInfo {
	return &NullableThumbnailInfo{value: val, isSet: true}
}

func (v NullableThumbnailInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThumbnailInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
