/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"encoding/json"
)

// ParentChangedEvent 親チャンネル変更イベント
type ParentChangedEvent struct {
	// 変更者UUID
	UserId string `json:"userId"`
	// 変更前親チャンネルUUID
	Before string `json:"before"`
	// 変更後親チャンネルUUID
	After string `json:"after"`
}

// NewParentChangedEvent instantiates a new ParentChangedEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParentChangedEvent(userId string, before string, after string) *ParentChangedEvent {
	this := ParentChangedEvent{}
	this.UserId = userId
	this.Before = before
	this.After = after
	return &this
}

// NewParentChangedEventWithDefaults instantiates a new ParentChangedEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParentChangedEventWithDefaults() *ParentChangedEvent {
	this := ParentChangedEvent{}
	return &this
}

// GetUserId returns the UserId field value
func (o *ParentChangedEvent) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *ParentChangedEvent) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *ParentChangedEvent) SetUserId(v string) {
	o.UserId = v
}

// GetBefore returns the Before field value
func (o *ParentChangedEvent) GetBefore() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Before
}

// GetBeforeOk returns a tuple with the Before field value
// and a boolean to check if the value has been set.
func (o *ParentChangedEvent) GetBeforeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Before, true
}

// SetBefore sets field value
func (o *ParentChangedEvent) SetBefore(v string) {
	o.Before = v
}

// GetAfter returns the After field value
func (o *ParentChangedEvent) GetAfter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.After
}

// GetAfterOk returns a tuple with the After field value
// and a boolean to check if the value has been set.
func (o *ParentChangedEvent) GetAfterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.After, true
}

// SetAfter sets field value
func (o *ParentChangedEvent) SetAfter(v string) {
	o.After = v
}

func (o ParentChangedEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["userId"] = o.UserId
	}
	if true {
		toSerialize["before"] = o.Before
	}
	if true {
		toSerialize["after"] = o.After
	}
	return json.Marshal(toSerialize)
}

type NullableParentChangedEvent struct {
	value *ParentChangedEvent
	isSet bool
}

func (v NullableParentChangedEvent) Get() *ParentChangedEvent {
	return v.value
}

func (v *NullableParentChangedEvent) Set(val *ParentChangedEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableParentChangedEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableParentChangedEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParentChangedEvent(val *ParentChangedEvent) *NullableParentChangedEvent {
	return &NullableParentChangedEvent{value: val, isSet: true}
}

func (v NullableParentChangedEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParentChangedEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
