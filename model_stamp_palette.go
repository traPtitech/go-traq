/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"encoding/json"
	"time"
)

// StampPalette スタンプパレット情報
type StampPalette struct {
	// スタンプパレットUUID
	Id string `json:"id"`
	// パレット名
	Name string `json:"name"`
	// パレット内のスタンプのUUID配列
	Stamps []string `json:"stamps"`
	// 作成者UUID
	CreatorId string `json:"creatorId"`
	// パレット作成日時
	CreatedAt time.Time `json:"createdAt"`
	// パレット更新日時
	UpdatedAt time.Time `json:"updatedAt"`
	// パレット説明
	Description string `json:"description"`
}

// NewStampPalette instantiates a new StampPalette object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStampPalette(id string, name string, stamps []string, creatorId string, createdAt time.Time, updatedAt time.Time, description string) *StampPalette {
	this := StampPalette{}
	this.Id = id
	this.Name = name
	this.Stamps = stamps
	this.CreatorId = creatorId
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Description = description
	return &this
}

// NewStampPaletteWithDefaults instantiates a new StampPalette object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStampPaletteWithDefaults() *StampPalette {
	this := StampPalette{}
	return &this
}

// GetId returns the Id field value
func (o *StampPalette) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *StampPalette) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *StampPalette) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *StampPalette) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StampPalette) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StampPalette) SetName(v string) {
	o.Name = v
}

// GetStamps returns the Stamps field value
func (o *StampPalette) GetStamps() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Stamps
}

// GetStampsOk returns a tuple with the Stamps field value
// and a boolean to check if the value has been set.
func (o *StampPalette) GetStampsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stamps, true
}

// SetStamps sets field value
func (o *StampPalette) SetStamps(v []string) {
	o.Stamps = v
}

// GetCreatorId returns the CreatorId field value
func (o *StampPalette) GetCreatorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value
// and a boolean to check if the value has been set.
func (o *StampPalette) GetCreatorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorId, true
}

// SetCreatorId sets field value
func (o *StampPalette) SetCreatorId(v string) {
	o.CreatorId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *StampPalette) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *StampPalette) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *StampPalette) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *StampPalette) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *StampPalette) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *StampPalette) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetDescription returns the Description field value
func (o *StampPalette) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *StampPalette) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *StampPalette) SetDescription(v string) {
	o.Description = v
}

func (o StampPalette) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["stamps"] = o.Stamps
	}
	if true {
		toSerialize["creatorId"] = o.CreatorId
	}
	if true {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if true {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if true {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableStampPalette struct {
	value *StampPalette
	isSet bool
}

func (v NullableStampPalette) Get() *StampPalette {
	return v.value
}

func (v *NullableStampPalette) Set(val *StampPalette) {
	v.value = val
	v.isSet = true
}

func (v NullableStampPalette) IsSet() bool {
	return v.isSet
}

func (v *NullableStampPalette) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStampPalette(val *StampPalette) *NullableStampPalette {
	return &NullableStampPalette{value: val, isSet: true}
}

func (v NullableStampPalette) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStampPalette) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
