/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"encoding/json"
	"fmt"
)

// OAuth2Prompt the model 'OAuth2Prompt'
type OAuth2Prompt string

// List of OAuth2Prompt
const (
	OAUTH2PROMPT_NONE OAuth2Prompt = "none"
)

// All allowed values of OAuth2Prompt enum
var AllowedOAuth2PromptEnumValues = []OAuth2Prompt{
	"none",
}

func (v *OAuth2Prompt) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OAuth2Prompt(value)
	for _, existing := range AllowedOAuth2PromptEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OAuth2Prompt", value)
}

// NewOAuth2PromptFromValue returns a pointer to a valid OAuth2Prompt
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOAuth2PromptFromValue(v string) (*OAuth2Prompt, error) {
	ev := OAuth2Prompt(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OAuth2Prompt: valid values are %v", v, AllowedOAuth2PromptEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OAuth2Prompt) IsValid() bool {
	for _, existing := range AllowedOAuth2PromptEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OAuth2Prompt value
func (v OAuth2Prompt) Ptr() *OAuth2Prompt {
	return &v
}

type NullableOAuth2Prompt struct {
	value *OAuth2Prompt
	isSet bool
}

func (v NullableOAuth2Prompt) Get() *OAuth2Prompt {
	return v.value
}

func (v *NullableOAuth2Prompt) Set(val *OAuth2Prompt) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuth2Prompt) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuth2Prompt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuth2Prompt(val *OAuth2Prompt) *NullableOAuth2Prompt {
	return &NullableOAuth2Prompt{value: val, isSet: true}
}

func (v NullableOAuth2Prompt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuth2Prompt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
