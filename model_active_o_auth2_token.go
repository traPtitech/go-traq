/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ActiveOAuth2Token type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveOAuth2Token{}

// ActiveOAuth2Token 有効なOAuth2トークン情報
type ActiveOAuth2Token struct {
	// トークンUUID
	Id string `json:"id"`
	// OAuth2クライアントUUID
	ClientId string `json:"clientId"`
	// スコープ
	Scopes []OAuth2Scope `json:"scopes"`
	// 発行日時
	IssuedAt time.Time `json:"issuedAt"`
}

type _ActiveOAuth2Token ActiveOAuth2Token

// NewActiveOAuth2Token instantiates a new ActiveOAuth2Token object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveOAuth2Token(id string, clientId string, scopes []OAuth2Scope, issuedAt time.Time) *ActiveOAuth2Token {
	this := ActiveOAuth2Token{}
	this.Id = id
	this.ClientId = clientId
	this.Scopes = scopes
	this.IssuedAt = issuedAt
	return &this
}

// NewActiveOAuth2TokenWithDefaults instantiates a new ActiveOAuth2Token object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveOAuth2TokenWithDefaults() *ActiveOAuth2Token {
	this := ActiveOAuth2Token{}
	return &this
}

// GetId returns the Id field value
func (o *ActiveOAuth2Token) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ActiveOAuth2Token) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ActiveOAuth2Token) SetId(v string) {
	o.Id = v
}

// GetClientId returns the ClientId field value
func (o *ActiveOAuth2Token) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *ActiveOAuth2Token) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *ActiveOAuth2Token) SetClientId(v string) {
	o.ClientId = v
}

// GetScopes returns the Scopes field value
func (o *ActiveOAuth2Token) GetScopes() []OAuth2Scope {
	if o == nil {
		var ret []OAuth2Scope
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
func (o *ActiveOAuth2Token) GetScopesOk() ([]OAuth2Scope, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scopes, true
}

// SetScopes sets field value
func (o *ActiveOAuth2Token) SetScopes(v []OAuth2Scope) {
	o.Scopes = v
}

// GetIssuedAt returns the IssuedAt field value
func (o *ActiveOAuth2Token) GetIssuedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.IssuedAt
}

// GetIssuedAtOk returns a tuple with the IssuedAt field value
// and a boolean to check if the value has been set.
func (o *ActiveOAuth2Token) GetIssuedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuedAt, true
}

// SetIssuedAt sets field value
func (o *ActiveOAuth2Token) SetIssuedAt(v time.Time) {
	o.IssuedAt = v
}

func (o ActiveOAuth2Token) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveOAuth2Token) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["clientId"] = o.ClientId
	toSerialize["scopes"] = o.Scopes
	toSerialize["issuedAt"] = o.IssuedAt
	return toSerialize, nil
}

func (o *ActiveOAuth2Token) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"clientId",
		"scopes",
		"issuedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActiveOAuth2Token := _ActiveOAuth2Token{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActiveOAuth2Token)

	if err != nil {
		return err
	}

	*o = ActiveOAuth2Token(varActiveOAuth2Token)

	return err
}

type NullableActiveOAuth2Token struct {
	value *ActiveOAuth2Token
	isSet bool
}

func (v NullableActiveOAuth2Token) Get() *ActiveOAuth2Token {
	return v.value
}

func (v *NullableActiveOAuth2Token) Set(val *ActiveOAuth2Token) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveOAuth2Token) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveOAuth2Token) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveOAuth2Token(val *ActiveOAuth2Token) *NullableActiveOAuth2Token {
	return &NullableActiveOAuth2Token{value: val, isSet: true}
}

func (v NullableActiveOAuth2Token) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveOAuth2Token) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
