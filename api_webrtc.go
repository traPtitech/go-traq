/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// WebrtcApiService WebrtcApi service
type WebrtcApiService service

type WebrtcApiGetWebRTCStateRequest struct {
	ctx        context.Context
	ApiService *WebrtcApiService
}

func (r WebrtcApiGetWebRTCStateRequest) Execute() ([]WebRTCUserState, *http.Response, error) {
	return r.ApiService.GetWebRTCStateExecute(r)
}

/*
GetWebRTCState WebRTC状態を取得

現在のWebRTC状態を取得します。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return WebrtcApiGetWebRTCStateRequest
*/
func (a *WebrtcApiService) GetWebRTCState(ctx context.Context) WebrtcApiGetWebRTCStateRequest {
	return WebrtcApiGetWebRTCStateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return []WebRTCUserState
func (a *WebrtcApiService) GetWebRTCStateExecute(r WebrtcApiGetWebRTCStateRequest) ([]WebRTCUserState, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []WebRTCUserState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebrtcApiService.GetWebRTCState")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/webrtc/state"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WebrtcApiPostWebRTCAuthenticateRequest struct {
	ctx                           context.Context
	ApiService                    *WebrtcApiService
	postWebRTCAuthenticateRequest *PostWebRTCAuthenticateRequest
}

func (r WebrtcApiPostWebRTCAuthenticateRequest) PostWebRTCAuthenticateRequest(postWebRTCAuthenticateRequest PostWebRTCAuthenticateRequest) WebrtcApiPostWebRTCAuthenticateRequest {
	r.postWebRTCAuthenticateRequest = &postWebRTCAuthenticateRequest
	return r
}

func (r WebrtcApiPostWebRTCAuthenticateRequest) Execute() (*WebRTCAuthenticateResult, *http.Response, error) {
	return r.ApiService.PostWebRTCAuthenticateExecute(r)
}

/*
PostWebRTCAuthenticate Skyway用認証API

Skyway WebRTC用の認証API

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return WebrtcApiPostWebRTCAuthenticateRequest
*/
func (a *WebrtcApiService) PostWebRTCAuthenticate(ctx context.Context) WebrtcApiPostWebRTCAuthenticateRequest {
	return WebrtcApiPostWebRTCAuthenticateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return WebRTCAuthenticateResult
func (a *WebrtcApiService) PostWebRTCAuthenticateExecute(r WebrtcApiPostWebRTCAuthenticateRequest) (*WebRTCAuthenticateResult, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WebRTCAuthenticateResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebrtcApiService.PostWebRTCAuthenticate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/webrtc/authenticate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postWebRTCAuthenticateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
