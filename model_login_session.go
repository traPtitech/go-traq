/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"encoding/json"
	"time"
)

// LoginSession ログインセッション情報
type LoginSession struct {
	// セッションUUID
	Id string `json:"id"`
	// 発行日時
	IssuedAt time.Time `json:"issuedAt"`
}

// NewLoginSession instantiates a new LoginSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginSession(id string, issuedAt time.Time) *LoginSession {
	this := LoginSession{}
	this.Id = id
	this.IssuedAt = issuedAt
	return &this
}

// NewLoginSessionWithDefaults instantiates a new LoginSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginSessionWithDefaults() *LoginSession {
	this := LoginSession{}
	return &this
}

// GetId returns the Id field value
func (o *LoginSession) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LoginSession) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LoginSession) SetId(v string) {
	o.Id = v
}

// GetIssuedAt returns the IssuedAt field value
func (o *LoginSession) GetIssuedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.IssuedAt
}

// GetIssuedAtOk returns a tuple with the IssuedAt field value
// and a boolean to check if the value has been set.
func (o *LoginSession) GetIssuedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuedAt, true
}

// SetIssuedAt sets field value
func (o *LoginSession) SetIssuedAt(v time.Time) {
	o.IssuedAt = v
}

func (o LoginSession) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["issuedAt"] = o.IssuedAt
	}
	return json.Marshal(toSerialize)
}

type NullableLoginSession struct {
	value *LoginSession
	isSet bool
}

func (v NullableLoginSession) Get() *LoginSession {
	return v.value
}

func (v *NullableLoginSession) Set(val *LoginSession) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginSession) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginSession(val *LoginSession) *NullableLoginSession {
	return &NullableLoginSession{value: val, isSet: true}
}

func (v NullableLoginSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
