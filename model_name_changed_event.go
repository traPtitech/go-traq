/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NameChangedEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NameChangedEvent{}

// NameChangedEvent チャンネル名変更イベント
type NameChangedEvent struct {
	// 変更者UUID
	UserId string `json:"userId"`
	// 変更前チャンネル名
	Before string `json:"before"`
	// 変更後チャンネル名
	After string `json:"after"`
}

type _NameChangedEvent NameChangedEvent

// NewNameChangedEvent instantiates a new NameChangedEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNameChangedEvent(userId string, before string, after string) *NameChangedEvent {
	this := NameChangedEvent{}
	this.UserId = userId
	this.Before = before
	this.After = after
	return &this
}

// NewNameChangedEventWithDefaults instantiates a new NameChangedEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNameChangedEventWithDefaults() *NameChangedEvent {
	this := NameChangedEvent{}
	return &this
}

// GetUserId returns the UserId field value
func (o *NameChangedEvent) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *NameChangedEvent) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *NameChangedEvent) SetUserId(v string) {
	o.UserId = v
}

// GetBefore returns the Before field value
func (o *NameChangedEvent) GetBefore() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Before
}

// GetBeforeOk returns a tuple with the Before field value
// and a boolean to check if the value has been set.
func (o *NameChangedEvent) GetBeforeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Before, true
}

// SetBefore sets field value
func (o *NameChangedEvent) SetBefore(v string) {
	o.Before = v
}

// GetAfter returns the After field value
func (o *NameChangedEvent) GetAfter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.After
}

// GetAfterOk returns a tuple with the After field value
// and a boolean to check if the value has been set.
func (o *NameChangedEvent) GetAfterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.After, true
}

// SetAfter sets field value
func (o *NameChangedEvent) SetAfter(v string) {
	o.After = v
}

func (o NameChangedEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NameChangedEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userId"] = o.UserId
	toSerialize["before"] = o.Before
	toSerialize["after"] = o.After
	return toSerialize, nil
}

func (o *NameChangedEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userId",
		"before",
		"after",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNameChangedEvent := _NameChangedEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNameChangedEvent)

	if err != nil {
		return err
	}

	*o = NameChangedEvent(varNameChangedEvent)

	return err
}

type NullableNameChangedEvent struct {
	value *NameChangedEvent
	isSet bool
}

func (v NullableNameChangedEvent) Get() *NameChangedEvent {
	return v.value
}

func (v *NullableNameChangedEvent) Set(val *NameChangedEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableNameChangedEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableNameChangedEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNameChangedEvent(val *NameChangedEvent) *NullableNameChangedEvent {
	return &NullableNameChangedEvent{value: val, isSet: true}
}

func (v NullableNameChangedEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNameChangedEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
