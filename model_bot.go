/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Bot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Bot{}

// Bot BOT情報
type Bot struct {
	// BOT UUID
	Id string `json:"id"`
	// BOTユーザーUUID
	BotUserId string `json:"botUserId"`
	// 説明
	Description string `json:"description"`
	// BOT開発者UUID
	DeveloperId string `json:"developerId"`
	// BOTが購読しているイベントの配列
	SubscribeEvents []string `json:"subscribeEvents"`
	Mode            BotMode  `json:"mode"`
	State           BotState `json:"state"`
	// 作成日時
	CreatedAt time.Time `json:"createdAt"`
	// 更新日時
	UpdatedAt time.Time `json:"updatedAt"`
}

type _Bot Bot

// NewBot instantiates a new Bot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBot(id string, botUserId string, description string, developerId string, subscribeEvents []string, mode BotMode, state BotState, createdAt time.Time, updatedAt time.Time) *Bot {
	this := Bot{}
	this.Id = id
	this.BotUserId = botUserId
	this.Description = description
	this.DeveloperId = developerId
	this.SubscribeEvents = subscribeEvents
	this.Mode = mode
	this.State = state
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewBotWithDefaults instantiates a new Bot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBotWithDefaults() *Bot {
	this := Bot{}
	return &this
}

// GetId returns the Id field value
func (o *Bot) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Bot) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Bot) SetId(v string) {
	o.Id = v
}

// GetBotUserId returns the BotUserId field value
func (o *Bot) GetBotUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BotUserId
}

// GetBotUserIdOk returns a tuple with the BotUserId field value
// and a boolean to check if the value has been set.
func (o *Bot) GetBotUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BotUserId, true
}

// SetBotUserId sets field value
func (o *Bot) SetBotUserId(v string) {
	o.BotUserId = v
}

// GetDescription returns the Description field value
func (o *Bot) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Bot) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Bot) SetDescription(v string) {
	o.Description = v
}

// GetDeveloperId returns the DeveloperId field value
func (o *Bot) GetDeveloperId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeveloperId
}

// GetDeveloperIdOk returns a tuple with the DeveloperId field value
// and a boolean to check if the value has been set.
func (o *Bot) GetDeveloperIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeveloperId, true
}

// SetDeveloperId sets field value
func (o *Bot) SetDeveloperId(v string) {
	o.DeveloperId = v
}

// GetSubscribeEvents returns the SubscribeEvents field value
func (o *Bot) GetSubscribeEvents() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SubscribeEvents
}

// GetSubscribeEventsOk returns a tuple with the SubscribeEvents field value
// and a boolean to check if the value has been set.
func (o *Bot) GetSubscribeEventsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubscribeEvents, true
}

// SetSubscribeEvents sets field value
func (o *Bot) SetSubscribeEvents(v []string) {
	o.SubscribeEvents = v
}

// GetMode returns the Mode field value
func (o *Bot) GetMode() BotMode {
	if o == nil {
		var ret BotMode
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *Bot) GetModeOk() (*BotMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *Bot) SetMode(v BotMode) {
	o.Mode = v
}

// GetState returns the State field value
func (o *Bot) GetState() BotState {
	if o == nil {
		var ret BotState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Bot) GetStateOk() (*BotState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Bot) SetState(v BotState) {
	o.State = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Bot) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Bot) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Bot) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Bot) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Bot) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Bot) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o Bot) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Bot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["botUserId"] = o.BotUserId
	toSerialize["description"] = o.Description
	toSerialize["developerId"] = o.DeveloperId
	toSerialize["subscribeEvents"] = o.SubscribeEvents
	toSerialize["mode"] = o.Mode
	toSerialize["state"] = o.State
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *Bot) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"botUserId",
		"description",
		"developerId",
		"subscribeEvents",
		"mode",
		"state",
		"createdAt",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBot := _Bot{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBot)

	if err != nil {
		return err
	}

	*o = Bot(varBot)

	return err
}

type NullableBot struct {
	value *Bot
	isSet bool
}

func (v NullableBot) Get() *Bot {
	return v.value
}

func (v *NullableBot) Set(val *Bot) {
	v.value = val
	v.isSet = true
}

func (v NullableBot) IsSet() bool {
	return v.isSet
}

func (v *NullableBot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBot(val *Bot) *NullableBot {
	return &NullableBot{value: val, isSet: true}
}

func (v NullableBot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
