/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the WebRTCAuthenticateResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebRTCAuthenticateResult{}

// WebRTCAuthenticateResult skyway用認証リクエストリザルト
type WebRTCAuthenticateResult struct {
	// ピアID
	PeerId string `json:"peerId"`
	// TTL
	Ttl int32 `json:"ttl"`
	// タイムスタンプ
	Timestamp int64 `json:"timestamp"`
	// 認証トークン
	AuthToken string `json:"authToken"`
}

type _WebRTCAuthenticateResult WebRTCAuthenticateResult

// NewWebRTCAuthenticateResult instantiates a new WebRTCAuthenticateResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebRTCAuthenticateResult(peerId string, ttl int32, timestamp int64, authToken string) *WebRTCAuthenticateResult {
	this := WebRTCAuthenticateResult{}
	this.PeerId = peerId
	this.Ttl = ttl
	this.Timestamp = timestamp
	this.AuthToken = authToken
	return &this
}

// NewWebRTCAuthenticateResultWithDefaults instantiates a new WebRTCAuthenticateResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebRTCAuthenticateResultWithDefaults() *WebRTCAuthenticateResult {
	this := WebRTCAuthenticateResult{}
	return &this
}

// GetPeerId returns the PeerId field value
func (o *WebRTCAuthenticateResult) GetPeerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PeerId
}

// GetPeerIdOk returns a tuple with the PeerId field value
// and a boolean to check if the value has been set.
func (o *WebRTCAuthenticateResult) GetPeerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PeerId, true
}

// SetPeerId sets field value
func (o *WebRTCAuthenticateResult) SetPeerId(v string) {
	o.PeerId = v
}

// GetTtl returns the Ttl field value
func (o *WebRTCAuthenticateResult) GetTtl() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value
// and a boolean to check if the value has been set.
func (o *WebRTCAuthenticateResult) GetTtlOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ttl, true
}

// SetTtl sets field value
func (o *WebRTCAuthenticateResult) SetTtl(v int32) {
	o.Ttl = v
}

// GetTimestamp returns the Timestamp field value
func (o *WebRTCAuthenticateResult) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *WebRTCAuthenticateResult) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *WebRTCAuthenticateResult) SetTimestamp(v int64) {
	o.Timestamp = v
}

// GetAuthToken returns the AuthToken field value
func (o *WebRTCAuthenticateResult) GetAuthToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthToken
}

// GetAuthTokenOk returns a tuple with the AuthToken field value
// and a boolean to check if the value has been set.
func (o *WebRTCAuthenticateResult) GetAuthTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthToken, true
}

// SetAuthToken sets field value
func (o *WebRTCAuthenticateResult) SetAuthToken(v string) {
	o.AuthToken = v
}

func (o WebRTCAuthenticateResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebRTCAuthenticateResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["peerId"] = o.PeerId
	toSerialize["ttl"] = o.Ttl
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["authToken"] = o.AuthToken
	return toSerialize, nil
}

func (o *WebRTCAuthenticateResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"peerId",
		"ttl",
		"timestamp",
		"authToken",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebRTCAuthenticateResult := _WebRTCAuthenticateResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWebRTCAuthenticateResult)

	if err != nil {
		return err
	}

	*o = WebRTCAuthenticateResult(varWebRTCAuthenticateResult)

	return err
}

type NullableWebRTCAuthenticateResult struct {
	value *WebRTCAuthenticateResult
	isSet bool
}

func (v NullableWebRTCAuthenticateResult) Get() *WebRTCAuthenticateResult {
	return v.value
}

func (v *NullableWebRTCAuthenticateResult) Set(val *WebRTCAuthenticateResult) {
	v.value = val
	v.isSet = true
}

func (v NullableWebRTCAuthenticateResult) IsSet() bool {
	return v.isSet
}

func (v *NullableWebRTCAuthenticateResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebRTCAuthenticateResult(val *WebRTCAuthenticateResult) *NullableWebRTCAuthenticateResult {
	return &NullableWebRTCAuthenticateResult{value: val, isSet: true}
}

func (v NullableWebRTCAuthenticateResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebRTCAuthenticateResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
