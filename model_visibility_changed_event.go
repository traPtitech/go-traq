/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"encoding/json"
)

// checks if the VisibilityChangedEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VisibilityChangedEvent{}

// VisibilityChangedEvent チャンネル可視状態変更イベント
type VisibilityChangedEvent struct {
	// 変更者UUID
	UserId string `json:"userId"`
	// 変更後可視状態
	Visibility bool `json:"visibility"`
}

// NewVisibilityChangedEvent instantiates a new VisibilityChangedEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisibilityChangedEvent(userId string, visibility bool) *VisibilityChangedEvent {
	this := VisibilityChangedEvent{}
	this.UserId = userId
	this.Visibility = visibility
	return &this
}

// NewVisibilityChangedEventWithDefaults instantiates a new VisibilityChangedEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisibilityChangedEventWithDefaults() *VisibilityChangedEvent {
	this := VisibilityChangedEvent{}
	return &this
}

// GetUserId returns the UserId field value
func (o *VisibilityChangedEvent) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *VisibilityChangedEvent) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *VisibilityChangedEvent) SetUserId(v string) {
	o.UserId = v
}

// GetVisibility returns the Visibility field value
func (o *VisibilityChangedEvent) GetVisibility() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value
// and a boolean to check if the value has been set.
func (o *VisibilityChangedEvent) GetVisibilityOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Visibility, true
}

// SetVisibility sets field value
func (o *VisibilityChangedEvent) SetVisibility(v bool) {
	o.Visibility = v
}

func (o VisibilityChangedEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisibilityChangedEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userId"] = o.UserId
	toSerialize["visibility"] = o.Visibility
	return toSerialize, nil
}

type NullableVisibilityChangedEvent struct {
	value *VisibilityChangedEvent
	isSet bool
}

func (v NullableVisibilityChangedEvent) Get() *VisibilityChangedEvent {
	return v.value
}

func (v *NullableVisibilityChangedEvent) Set(val *VisibilityChangedEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableVisibilityChangedEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableVisibilityChangedEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisibilityChangedEvent(val *VisibilityChangedEvent) *NullableVisibilityChangedEvent {
	return &NullableVisibilityChangedEvent{value: val, isSet: true}
}

func (v NullableVisibilityChangedEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisibilityChangedEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
