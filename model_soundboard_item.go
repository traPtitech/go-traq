/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SoundboardItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SoundboardItem{}

// SoundboardItem struct for SoundboardItem
type SoundboardItem struct {
	// サーバが発行したサウンドID
	SoundId string `json:"soundId"`
	// ユーザが指定した表示用のサウンド名
	SoundName string `json:"soundName"`
	// 任意のスタンプID等、サウンドに紐づく拡張情報
	StampId string `json:"stampId"`
	// 作成者のユーザID
	CreatorId string `json:"creatorId"`
}

type _SoundboardItem SoundboardItem

// NewSoundboardItem instantiates a new SoundboardItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoundboardItem(soundId string, soundName string, stampId string, creatorId string) *SoundboardItem {
	this := SoundboardItem{}
	this.SoundId = soundId
	this.SoundName = soundName
	this.StampId = stampId
	this.CreatorId = creatorId
	return &this
}

// NewSoundboardItemWithDefaults instantiates a new SoundboardItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoundboardItemWithDefaults() *SoundboardItem {
	this := SoundboardItem{}
	return &this
}

// GetSoundId returns the SoundId field value
func (o *SoundboardItem) GetSoundId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SoundId
}

// GetSoundIdOk returns a tuple with the SoundId field value
// and a boolean to check if the value has been set.
func (o *SoundboardItem) GetSoundIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoundId, true
}

// SetSoundId sets field value
func (o *SoundboardItem) SetSoundId(v string) {
	o.SoundId = v
}

// GetSoundName returns the SoundName field value
func (o *SoundboardItem) GetSoundName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SoundName
}

// GetSoundNameOk returns a tuple with the SoundName field value
// and a boolean to check if the value has been set.
func (o *SoundboardItem) GetSoundNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoundName, true
}

// SetSoundName sets field value
func (o *SoundboardItem) SetSoundName(v string) {
	o.SoundName = v
}

// GetStampId returns the StampId field value
func (o *SoundboardItem) GetStampId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StampId
}

// GetStampIdOk returns a tuple with the StampId field value
// and a boolean to check if the value has been set.
func (o *SoundboardItem) GetStampIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StampId, true
}

// SetStampId sets field value
func (o *SoundboardItem) SetStampId(v string) {
	o.StampId = v
}

// GetCreatorId returns the CreatorId field value
func (o *SoundboardItem) GetCreatorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value
// and a boolean to check if the value has been set.
func (o *SoundboardItem) GetCreatorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorId, true
}

// SetCreatorId sets field value
func (o *SoundboardItem) SetCreatorId(v string) {
	o.CreatorId = v
}

func (o SoundboardItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SoundboardItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["soundId"] = o.SoundId
	toSerialize["soundName"] = o.SoundName
	toSerialize["stampId"] = o.StampId
	toSerialize["creatorId"] = o.CreatorId
	return toSerialize, nil
}

func (o *SoundboardItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"soundId",
		"soundName",
		"stampId",
		"creatorId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSoundboardItem := _SoundboardItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSoundboardItem)

	if err != nil {
		return err
	}

	*o = SoundboardItem(varSoundboardItem)

	return err
}

type NullableSoundboardItem struct {
	value *SoundboardItem
	isSet bool
}

func (v NullableSoundboardItem) Get() *SoundboardItem {
	return v.value
}

func (v *NullableSoundboardItem) Set(val *SoundboardItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSoundboardItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSoundboardItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoundboardItem(val *SoundboardItem) *NullableSoundboardItem {
	return &NullableSoundboardItem{value: val, isSet: true}
}

func (v NullableSoundboardItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoundboardItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
