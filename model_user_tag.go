/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the UserTag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserTag{}

// UserTag ユーザータグ
type UserTag struct {
	// タグUUID
	TagId string `json:"tagId"`
	// タグ文字列
	Tag string `json:"tag"`
	// タグがロックされているか
	IsLocked bool `json:"isLocked"`
	// タグ付与日時
	CreatedAt time.Time `json:"createdAt"`
	// タグ更新日時
	UpdatedAt time.Time `json:"updatedAt"`
}

type _UserTag UserTag

// NewUserTag instantiates a new UserTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserTag(tagId string, tag string, isLocked bool, createdAt time.Time, updatedAt time.Time) *UserTag {
	this := UserTag{}
	this.TagId = tagId
	this.Tag = tag
	this.IsLocked = isLocked
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewUserTagWithDefaults instantiates a new UserTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserTagWithDefaults() *UserTag {
	this := UserTag{}
	return &this
}

// GetTagId returns the TagId field value
func (o *UserTag) GetTagId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TagId
}

// GetTagIdOk returns a tuple with the TagId field value
// and a boolean to check if the value has been set.
func (o *UserTag) GetTagIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TagId, true
}

// SetTagId sets field value
func (o *UserTag) SetTagId(v string) {
	o.TagId = v
}

// GetTag returns the Tag field value
func (o *UserTag) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *UserTag) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *UserTag) SetTag(v string) {
	o.Tag = v
}

// GetIsLocked returns the IsLocked field value
func (o *UserTag) GetIsLocked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value
// and a boolean to check if the value has been set.
func (o *UserTag) GetIsLockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsLocked, true
}

// SetIsLocked sets field value
func (o *UserTag) SetIsLocked(v bool) {
	o.IsLocked = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *UserTag) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *UserTag) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *UserTag) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *UserTag) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *UserTag) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *UserTag) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o UserTag) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserTag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tagId"] = o.TagId
	toSerialize["tag"] = o.Tag
	toSerialize["isLocked"] = o.IsLocked
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *UserTag) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tagId",
		"tag",
		"isLocked",
		"createdAt",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserTag := _UserTag{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserTag)

	if err != nil {
		return err
	}

	*o = UserTag(varUserTag)

	return err
}

type NullableUserTag struct {
	value *UserTag
	isSet bool
}

func (v NullableUserTag) Get() *UserTag {
	return v.value
}

func (v *NullableUserTag) Set(val *UserTag) {
	v.value = val
	v.isSet = true
}

func (v NullableUserTag) IsSet() bool {
	return v.isSet
}

func (v *NullableUserTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserTag(val *UserTag) *NullableUserTag {
	return &NullableUserTag{value: val, isSet: true}
}

func (v NullableUserTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
