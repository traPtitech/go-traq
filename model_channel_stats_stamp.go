/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ChannelStatsStamp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelStatsStamp{}

// ChannelStatsStamp チャンネル上の特定スタンプ統計情報
type ChannelStatsStamp struct {
	// スタンプID
	Id string `json:"id"`
	// スタンプ数(同一メッセージ上のものは複数カウントしない)
	Count int64 `json:"count"`
	// スタンプ数(同一メッセージ上のものも複数カウントする)
	Total int64 `json:"total"`
}

type _ChannelStatsStamp ChannelStatsStamp

// NewChannelStatsStamp instantiates a new ChannelStatsStamp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelStatsStamp(id string, count int64, total int64) *ChannelStatsStamp {
	this := ChannelStatsStamp{}
	this.Id = id
	this.Count = count
	this.Total = total
	return &this
}

// NewChannelStatsStampWithDefaults instantiates a new ChannelStatsStamp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelStatsStampWithDefaults() *ChannelStatsStamp {
	this := ChannelStatsStamp{}
	return &this
}

// GetId returns the Id field value
func (o *ChannelStatsStamp) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ChannelStatsStamp) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ChannelStatsStamp) SetId(v string) {
	o.Id = v
}

// GetCount returns the Count field value
func (o *ChannelStatsStamp) GetCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *ChannelStatsStamp) GetCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *ChannelStatsStamp) SetCount(v int64) {
	o.Count = v
}

// GetTotal returns the Total field value
func (o *ChannelStatsStamp) GetTotal() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *ChannelStatsStamp) GetTotalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *ChannelStatsStamp) SetTotal(v int64) {
	o.Total = v
}

func (o ChannelStatsStamp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelStatsStamp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["count"] = o.Count
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *ChannelStatsStamp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"count",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChannelStatsStamp := _ChannelStatsStamp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChannelStatsStamp)

	if err != nil {
		return err
	}

	*o = ChannelStatsStamp(varChannelStatsStamp)

	return err
}

type NullableChannelStatsStamp struct {
	value *ChannelStatsStamp
	isSet bool
}

func (v NullableChannelStatsStamp) Get() *ChannelStatsStamp {
	return v.value
}

func (v *NullableChannelStatsStamp) Set(val *ChannelStatsStamp) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelStatsStamp) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelStatsStamp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelStatsStamp(val *ChannelStatsStamp) *NullableChannelStatsStamp {
	return &NullableChannelStatsStamp{value: val, isSet: true}
}

func (v NullableChannelStatsStamp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelStatsStamp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
