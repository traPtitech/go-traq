/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the StampStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StampStats{}

// StampStats スタンプ統計情報
type StampStats struct {
	// スタンプ使用総数(同じユーザによって同じメッセージに貼られたものは複数カウントしない)
	Count int64 `json:"count"`
	// スタンプ使用総数(全てカウント)
	TotalCount int64 `json:"totalCount"`
}

type _StampStats StampStats

// NewStampStats instantiates a new StampStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStampStats(count int64, totalCount int64) *StampStats {
	this := StampStats{}
	this.Count = count
	this.TotalCount = totalCount
	return &this
}

// NewStampStatsWithDefaults instantiates a new StampStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStampStatsWithDefaults() *StampStats {
	this := StampStats{}
	return &this
}

// GetCount returns the Count field value
func (o *StampStats) GetCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *StampStats) GetCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *StampStats) SetCount(v int64) {
	o.Count = v
}

// GetTotalCount returns the TotalCount field value
func (o *StampStats) GetTotalCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *StampStats) GetTotalCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *StampStats) SetTotalCount(v int64) {
	o.TotalCount = v
}

func (o StampStats) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StampStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["totalCount"] = o.TotalCount
	return toSerialize, nil
}

func (o *StampStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"totalCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStampStats := _StampStats{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStampStats)

	if err != nil {
		return err
	}

	*o = StampStats(varStampStats)

	return err
}

type NullableStampStats struct {
	value *StampStats
	isSet bool
}

func (v NullableStampStats) Get() *StampStats {
	return v.value
}

func (v *NullableStampStats) Set(val *StampStats) {
	v.value = val
	v.isSet = true
}

func (v NullableStampStats) IsSet() bool {
	return v.isSet
}

func (v *NullableStampStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStampStats(val *StampStats) *NullableStampStats {
	return &NullableStampStats{value: val, isSet: true}
}

func (v NullableStampStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStampStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
