/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"encoding/json"
)

// StampStats スタンプ統計情報
type StampStats struct {
	// スタンプ使用総数(同じユーザによって同じメッセージに貼られたものは複数カウントしない)
	Count int64 `json:"count"`
	// スタンプ使用総数(全てカウント)
	TotalCount int64 `json:"totalCount"`
}

// NewStampStats instantiates a new StampStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStampStats(count int64, totalCount int64) *StampStats {
	this := StampStats{}
	this.Count = count
	this.TotalCount = totalCount
	return &this
}

// NewStampStatsWithDefaults instantiates a new StampStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStampStatsWithDefaults() *StampStats {
	this := StampStats{}
	return &this
}

// GetCount returns the Count field value
func (o *StampStats) GetCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *StampStats) GetCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *StampStats) SetCount(v int64) {
	o.Count = v
}

// GetTotalCount returns the TotalCount field value
func (o *StampStats) GetTotalCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *StampStats) GetTotalCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *StampStats) SetTotalCount(v int64) {
	o.TotalCount = v
}

func (o StampStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["totalCount"] = o.TotalCount
	}
	return json.Marshal(toSerialize)
}

type NullableStampStats struct {
	value *StampStats
	isSet bool
}

func (v NullableStampStats) Get() *StampStats {
	return v.value
}

func (v *NullableStampStats) Set(val *StampStats) {
	v.value = val
	v.isSet = true
}

func (v NullableStampStats) IsSet() bool {
	return v.isSet
}

func (v *NullableStampStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStampStats(val *StampStats) *NullableStampStats {
	return &NullableStampStats{value: val, isSet: true}
}

func (v NullableStampStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStampStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
