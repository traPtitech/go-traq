/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"encoding/json"
	"fmt"
)

// UserPermission ユーザー権限
type UserPermission string

// List of UserPermission
const (
	USERPERMISSION_GetWebhook                UserPermission = "get_webhook"
	USERPERMISSION_CreateWebhook             UserPermission = "create_webhook"
	USERPERMISSION_EditWebhook               UserPermission = "edit_webhook"
	USERPERMISSION_DeleteWebhook             UserPermission = "delete_webhook"
	USERPERMISSION_AccessOthersWebhook       UserPermission = "access_others_webhook"
	USERPERMISSION_GetBot                    UserPermission = "get_bot"
	USERPERMISSION_CreateBot                 UserPermission = "create_bot"
	USERPERMISSION_EditBot                   UserPermission = "edit_bot"
	USERPERMISSION_DeleteBot                 UserPermission = "delete_bot"
	USERPERMISSION_AccessOthersBot           UserPermission = "access_others_bot"
	USERPERMISSION_BotActionJoinChannel      UserPermission = "bot_action_join_channel"
	USERPERMISSION_BotActionLeaveChannel     UserPermission = "bot_action_leave_channel"
	USERPERMISSION_CreateChannel             UserPermission = "create_channel"
	USERPERMISSION_GetChannel                UserPermission = "get_channel"
	USERPERMISSION_EditChannel               UserPermission = "edit_channel"
	USERPERMISSION_DeleteChannel             UserPermission = "delete_channel"
	USERPERMISSION_ChangeParentChannel       UserPermission = "change_parent_channel"
	USERPERMISSION_EditChannelTopic          UserPermission = "edit_channel_topic"
	USERPERMISSION_GetChannelStar            UserPermission = "get_channel_star"
	USERPERMISSION_EditChannelStar           UserPermission = "edit_channel_star"
	USERPERMISSION_GetMyTokens               UserPermission = "get_my_tokens"
	USERPERMISSION_RevokeMyToken             UserPermission = "revoke_my_token"
	USERPERMISSION_GetClients                UserPermission = "get_clients"
	USERPERMISSION_CreateClient              UserPermission = "create_client"
	USERPERMISSION_EditMyClient              UserPermission = "edit_my_client"
	USERPERMISSION_DeleteMyClient            UserPermission = "delete_my_client"
	USERPERMISSION_ManageOthersClient        UserPermission = "manage_others_client"
	USERPERMISSION_UploadFile                UserPermission = "upload_file"
	USERPERMISSION_DownloadFile              UserPermission = "download_file"
	USERPERMISSION_DeleteFile                UserPermission = "delete_file"
	USERPERMISSION_GetMessage                UserPermission = "get_message"
	USERPERMISSION_PostMessage               UserPermission = "post_message"
	USERPERMISSION_EditMessage               UserPermission = "edit_message"
	USERPERMISSION_DeleteMessage             UserPermission = "delete_message"
	USERPERMISSION_ReportMessage             UserPermission = "report_message"
	USERPERMISSION_GetMessageReports         UserPermission = "get_message_reports"
	USERPERMISSION_CreateMessagePin          UserPermission = "create_message_pin"
	USERPERMISSION_DeleteMessagePin          UserPermission = "delete_message_pin"
	USERPERMISSION_GetChannelSubscription    UserPermission = "get_channel_subscription"
	USERPERMISSION_EditChannelSubscription   UserPermission = "edit_channel_subscription"
	USERPERMISSION_ConnectNotificationStream UserPermission = "connect_notification_stream"
	USERPERMISSION_RegisterFCMDevice         UserPermission = "register_fcm_device"
	USERPERMISSION_GetStamp                  UserPermission = "get_stamp"
	USERPERMISSION_CreateStamp               UserPermission = "create_stamp"
	USERPERMISSION_EditStamp                 UserPermission = "edit_stamp"
	USERPERMISSION_EditStampCreatedByOthers  UserPermission = "edit_stamp_created_by_others"
	USERPERMISSION_DeleteStamp               UserPermission = "delete_stamp"
	USERPERMISSION_DeleteMyStamp             UserPermission = "delete_my_stamp"
	USERPERMISSION_AddMessageStamp           UserPermission = "add_message_stamp"
	USERPERMISSION_RemoveMessageStamp        UserPermission = "remove_message_stamp"
	USERPERMISSION_GetMyStampHistory         UserPermission = "get_my_stamp_history"
	USERPERMISSION_GetStampPalette           UserPermission = "get_stamp_palette"
	USERPERMISSION_CreateStampPalette        UserPermission = "create_stamp_palette"
	USERPERMISSION_EditStampPalette          UserPermission = "edit_stamp_palette"
	USERPERMISSION_DeleteStampPalette        UserPermission = "delete_stamp_palette"
	USERPERMISSION_GetUser                   UserPermission = "get_user"
	USERPERMISSION_RegisterUser              UserPermission = "register_user"
	USERPERMISSION_GetMe                     UserPermission = "get_me"
	USERPERMISSION_GetOIDCUserInfo           UserPermission = "get_oidc_userinfo"
	USERPERMISSION_EditMe                    UserPermission = "edit_me"
	USERPERMISSION_ChangeMyIcon              UserPermission = "change_my_icon"
	USERPERMISSION_ChangeMyPassword          UserPermission = "change_my_password"
	USERPERMISSION_EditOtherUsers            UserPermission = "edit_other_users"
	USERPERMISSION_GetUserQRCode             UserPermission = "get_user_qr_code"
	USERPERMISSION_GetUserTag                UserPermission = "get_user_tag"
	USERPERMISSION_EditUserTag               UserPermission = "edit_user_tag"
	USERPERMISSION_GetUserGroup              UserPermission = "get_user_group"
	USERPERMISSION_CreateUserGroup           UserPermission = "create_user_group"
	USERPERMISSION_CreateSpecialUserGroup    UserPermission = "create_special_user_group"
	USERPERMISSION_EditUserGroup             UserPermission = "edit_user_group"
	USERPERMISSION_DeleteUserGroup           UserPermission = "delete_user_group"
	USERPERMISSION_AllUserGroupsAdmin        UserPermission = "edit_others_user_group"
	USERPERMISSION_WebRTC                    UserPermission = "web_rtc"
	USERPERMISSION_GetMySessions             UserPermission = "get_my_sessions"
	USERPERMISSION_DeleteMySessions          UserPermission = "delete_my_sessions"
	USERPERMISSION_GetMyExternalAccount      UserPermission = "get_my_external_account"
	USERPERMISSION_EditMyExternalAccount     UserPermission = "edit_my_external_account"
	USERPERMISSION_GetUnread                 UserPermission = "get_unread"
	USERPERMISSION_DeleteUnread              UserPermission = "delete_unread"
	USERPERMISSION_GetClipFolder             UserPermission = "get_clip_folder"
	USERPERMISSION_CreateClipFolder          UserPermission = "create_clip_folder"
	USERPERMISSION_EditClipFolder            UserPermission = "edit_clip_folder"
	USERPERMISSION_DeleteClipFolder          UserPermission = "delete_clip_folder"
)

// All allowed values of UserPermission enum
var AllowedUserPermissionEnumValues = []UserPermission{
	"get_webhook",
	"create_webhook",
	"edit_webhook",
	"delete_webhook",
	"access_others_webhook",
	"get_bot",
	"create_bot",
	"edit_bot",
	"delete_bot",
	"access_others_bot",
	"bot_action_join_channel",
	"bot_action_leave_channel",
	"create_channel",
	"get_channel",
	"edit_channel",
	"delete_channel",
	"change_parent_channel",
	"edit_channel_topic",
	"get_channel_star",
	"edit_channel_star",
	"get_my_tokens",
	"revoke_my_token",
	"get_clients",
	"create_client",
	"edit_my_client",
	"delete_my_client",
	"manage_others_client",
	"upload_file",
	"download_file",
	"delete_file",
	"get_message",
	"post_message",
	"edit_message",
	"delete_message",
	"report_message",
	"get_message_reports",
	"create_message_pin",
	"delete_message_pin",
	"get_channel_subscription",
	"edit_channel_subscription",
	"connect_notification_stream",
	"register_fcm_device",
	"get_stamp",
	"create_stamp",
	"edit_stamp",
	"edit_stamp_created_by_others",
	"delete_stamp",
	"delete_my_stamp",
	"add_message_stamp",
	"remove_message_stamp",
	"get_my_stamp_history",
	"get_stamp_palette",
	"create_stamp_palette",
	"edit_stamp_palette",
	"delete_stamp_palette",
	"get_user",
	"register_user",
	"get_me",
	"get_oidc_userinfo",
	"edit_me",
	"change_my_icon",
	"change_my_password",
	"edit_other_users",
	"get_user_qr_code",
	"get_user_tag",
	"edit_user_tag",
	"get_user_group",
	"create_user_group",
	"create_special_user_group",
	"edit_user_group",
	"delete_user_group",
	"edit_others_user_group",
	"web_rtc",
	"get_my_sessions",
	"delete_my_sessions",
	"get_my_external_account",
	"edit_my_external_account",
	"get_unread",
	"delete_unread",
	"get_clip_folder",
	"create_clip_folder",
	"edit_clip_folder",
	"delete_clip_folder",
}

func (v *UserPermission) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserPermission(value)
	for _, existing := range AllowedUserPermissionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserPermission", value)
}

// NewUserPermissionFromValue returns a pointer to a valid UserPermission
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserPermissionFromValue(v string) (*UserPermission, error) {
	ev := UserPermission(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserPermission: valid values are %v", v, AllowedUserPermissionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserPermission) IsValid() bool {
	for _, existing := range AllowedUserPermissionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserPermission value
func (v UserPermission) Ptr() *UserPermission {
	return &v
}

type NullableUserPermission struct {
	value *UserPermission
	isSet bool
}

func (v NullableUserPermission) Get() *UserPermission {
	return v.value
}

func (v *NullableUserPermission) Set(val *UserPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPermission(val *UserPermission) *NullableUserPermission {
	return &NullableUserPermission{value: val, isSet: true}
}

func (v NullableUserPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
