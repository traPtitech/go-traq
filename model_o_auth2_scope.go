/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"encoding/json"
	"fmt"
)

// OAuth2Scope OAuth2スコープ
type OAuth2Scope string

// List of OAuth2Scope
const (
	OAUTH2SCOPE_OPENID     OAuth2Scope = "openid"
	OAUTH2SCOPE_PROFILE    OAuth2Scope = "profile"
	OAUTH2SCOPE_READ       OAuth2Scope = "read"
	OAUTH2SCOPE_WRITE      OAuth2Scope = "write"
	OAUTH2SCOPE_MANAGE_BOT OAuth2Scope = "manage_bot"
)

// All allowed values of OAuth2Scope enum
var AllowedOAuth2ScopeEnumValues = []OAuth2Scope{
	"openid",
	"profile",
	"read",
	"write",
	"manage_bot",
}

func (v *OAuth2Scope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OAuth2Scope(value)
	for _, existing := range AllowedOAuth2ScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OAuth2Scope", value)
}

// NewOAuth2ScopeFromValue returns a pointer to a valid OAuth2Scope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOAuth2ScopeFromValue(v string) (*OAuth2Scope, error) {
	ev := OAuth2Scope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OAuth2Scope: valid values are %v", v, AllowedOAuth2ScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OAuth2Scope) IsValid() bool {
	for _, existing := range AllowedOAuth2ScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OAuth2Scope value
func (v OAuth2Scope) Ptr() *OAuth2Scope {
	return &v
}

type NullableOAuth2Scope struct {
	value *OAuth2Scope
	isSet bool
}

func (v NullableOAuth2Scope) Get() *OAuth2Scope {
	return v.value
}

func (v *NullableOAuth2Scope) Set(val *OAuth2Scope) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuth2Scope) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuth2Scope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuth2Scope(val *OAuth2Scope) *NullableOAuth2Scope {
	return &NullableOAuth2Scope{value: val, isSet: true}
}

func (v NullableOAuth2Scope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuth2Scope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
