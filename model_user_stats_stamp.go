/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"encoding/json"
)

// checks if the UserStatsStamp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserStatsStamp{}

// UserStatsStamp ユーザーの特定スタンプ統計情報
type UserStatsStamp struct {
	// スタンプID
	Id string `json:"id"`
	// スタンプ数(同一メッセージ上のものは複数カウントしない)
	Count int64 `json:"count"`
	// スタンプ数(同一メッセージ上のものも複数カウントする)
	Total int64 `json:"total"`
}

// NewUserStatsStamp instantiates a new UserStatsStamp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserStatsStamp(id string, count int64, total int64) *UserStatsStamp {
	this := UserStatsStamp{}
	this.Id = id
	this.Count = count
	this.Total = total
	return &this
}

// NewUserStatsStampWithDefaults instantiates a new UserStatsStamp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserStatsStampWithDefaults() *UserStatsStamp {
	this := UserStatsStamp{}
	return &this
}

// GetId returns the Id field value
func (o *UserStatsStamp) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserStatsStamp) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserStatsStamp) SetId(v string) {
	o.Id = v
}

// GetCount returns the Count field value
func (o *UserStatsStamp) GetCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *UserStatsStamp) GetCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *UserStatsStamp) SetCount(v int64) {
	o.Count = v
}

// GetTotal returns the Total field value
func (o *UserStatsStamp) GetTotal() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *UserStatsStamp) GetTotalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *UserStatsStamp) SetTotal(v int64) {
	o.Total = v
}

func (o UserStatsStamp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserStatsStamp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["count"] = o.Count
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

type NullableUserStatsStamp struct {
	value *UserStatsStamp
	isSet bool
}

func (v NullableUserStatsStamp) Get() *UserStatsStamp {
	return v.value
}

func (v *NullableUserStatsStamp) Set(val *UserStatsStamp) {
	v.value = val
	v.isSet = true
}

func (v NullableUserStatsStamp) IsSet() bool {
	return v.isSet
}

func (v *NullableUserStatsStamp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserStatsStamp(val *UserStatsStamp) *NullableUserStatsStamp {
	return &NullableUserStatsStamp{value: val, isSet: true}
}

func (v NullableUserStatsStamp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserStatsStamp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
