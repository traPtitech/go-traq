/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"encoding/json"
	"fmt"
)

// BotEventResult イベント配送結果
type BotEventResult string

// List of BotEventResult
const (
	BOTEVENTRESULT_OK           BotEventResult = "ok"
	BOTEVENTRESULT_NG           BotEventResult = "ng"
	BOTEVENTRESULT_NetworkError BotEventResult = "ne"
	BOTEVENTRESULT_Dropped      BotEventResult = "dp"
)

// All allowed values of BotEventResult enum
var AllowedBotEventResultEnumValues = []BotEventResult{
	"ok",
	"ng",
	"ne",
	"dp",
}

func (v *BotEventResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BotEventResult(value)
	for _, existing := range AllowedBotEventResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BotEventResult", value)
}

// NewBotEventResultFromValue returns a pointer to a valid BotEventResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBotEventResultFromValue(v string) (*BotEventResult, error) {
	ev := BotEventResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BotEventResult: valid values are %v", v, AllowedBotEventResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BotEventResult) IsValid() bool {
	for _, existing := range AllowedBotEventResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BotEventResult value
func (v BotEventResult) Ptr() *BotEventResult {
	return &v
}

type NullableBotEventResult struct {
	value *BotEventResult
	isSet bool
}

func (v NullableBotEventResult) Get() *BotEventResult {
	return v.value
}

func (v *NullableBotEventResult) Set(val *BotEventResult) {
	v.value = val
	v.isSet = true
}

func (v NullableBotEventResult) IsSet() bool {
	return v.isSet
}

func (v *NullableBotEventResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBotEventResult(val *BotEventResult) *NullableBotEventResult {
	return &NullableBotEventResult{value: val, isSet: true}
}

func (v NullableBotEventResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBotEventResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
