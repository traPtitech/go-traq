/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"encoding/json"
	"fmt"
)

// GetClient200Response - struct for GetClient200Response
type GetClient200Response struct {
	OAuth2Client       *OAuth2Client
	OAuth2ClientDetail *OAuth2ClientDetail
}

// OAuth2ClientAsGetClient200Response is a convenience function that returns OAuth2Client wrapped in GetClient200Response
func OAuth2ClientAsGetClient200Response(v *OAuth2Client) GetClient200Response {
	return GetClient200Response{
		OAuth2Client: v,
	}
}

// OAuth2ClientDetailAsGetClient200Response is a convenience function that returns OAuth2ClientDetail wrapped in GetClient200Response
func OAuth2ClientDetailAsGetClient200Response(v *OAuth2ClientDetail) GetClient200Response {
	return GetClient200Response{
		OAuth2ClientDetail: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetClient200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into OAuth2Client
	err = newStrictDecoder(data).Decode(&dst.OAuth2Client)
	if err == nil {
		jsonOAuth2Client, _ := json.Marshal(dst.OAuth2Client)
		if string(jsonOAuth2Client) == "{}" { // empty struct
			dst.OAuth2Client = nil
		} else {
			match++
		}
	} else {
		dst.OAuth2Client = nil
	}

	// try to unmarshal data into OAuth2ClientDetail
	err = newStrictDecoder(data).Decode(&dst.OAuth2ClientDetail)
	if err == nil {
		jsonOAuth2ClientDetail, _ := json.Marshal(dst.OAuth2ClientDetail)
		if string(jsonOAuth2ClientDetail) == "{}" { // empty struct
			dst.OAuth2ClientDetail = nil
		} else {
			match++
		}
	} else {
		dst.OAuth2ClientDetail = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.OAuth2Client = nil
		dst.OAuth2ClientDetail = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetClient200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetClient200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetClient200Response) MarshalJSON() ([]byte, error) {
	if src.OAuth2Client != nil {
		return json.Marshal(&src.OAuth2Client)
	}

	if src.OAuth2ClientDetail != nil {
		return json.Marshal(&src.OAuth2ClientDetail)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetClient200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.OAuth2Client != nil {
		return obj.OAuth2Client
	}

	if obj.OAuth2ClientDetail != nil {
		return obj.OAuth2ClientDetail
	}

	// all schemas are nil
	return nil
}

type NullableGetClient200Response struct {
	value *GetClient200Response
	isSet bool
}

func (v NullableGetClient200Response) Get() *GetClient200Response {
	return v.value
}

func (v *NullableGetClient200Response) Set(val *GetClient200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetClient200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetClient200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetClient200Response(val *GetClient200Response) *NullableGetClient200Response {
	return &NullableGetClient200Response{value: val, isSet: true}
}

func (v NullableGetClient200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetClient200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
