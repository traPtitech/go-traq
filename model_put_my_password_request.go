/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PutMyPasswordRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutMyPasswordRequest{}

// PutMyPasswordRequest パスワード変更リクエスト
type PutMyPasswordRequest struct {
	// 現在のパスワード
	Password string `json:"password" validate:"regexp=^[\\\\x20-\\\\x7E]{10,32}$"`
	// 新しいパスワード
	NewPassword string `json:"newPassword" validate:"regexp=^[\\\\x20-\\\\x7E]{10,32}$"`
}

type _PutMyPasswordRequest PutMyPasswordRequest

// NewPutMyPasswordRequest instantiates a new PutMyPasswordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutMyPasswordRequest(password string, newPassword string) *PutMyPasswordRequest {
	this := PutMyPasswordRequest{}
	this.Password = password
	this.NewPassword = newPassword
	return &this
}

// NewPutMyPasswordRequestWithDefaults instantiates a new PutMyPasswordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutMyPasswordRequestWithDefaults() *PutMyPasswordRequest {
	this := PutMyPasswordRequest{}
	return &this
}

// GetPassword returns the Password field value
func (o *PutMyPasswordRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *PutMyPasswordRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *PutMyPasswordRequest) SetPassword(v string) {
	o.Password = v
}

// GetNewPassword returns the NewPassword field value
func (o *PutMyPasswordRequest) GetNewPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value
// and a boolean to check if the value has been set.
func (o *PutMyPasswordRequest) GetNewPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewPassword, true
}

// SetNewPassword sets field value
func (o *PutMyPasswordRequest) SetNewPassword(v string) {
	o.NewPassword = v
}

func (o PutMyPasswordRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutMyPasswordRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["password"] = o.Password
	toSerialize["newPassword"] = o.NewPassword
	return toSerialize, nil
}

func (o *PutMyPasswordRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"password",
		"newPassword",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPutMyPasswordRequest := _PutMyPasswordRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPutMyPasswordRequest)

	if err != nil {
		return err
	}

	*o = PutMyPasswordRequest(varPutMyPasswordRequest)

	return err
}

type NullablePutMyPasswordRequest struct {
	value *PutMyPasswordRequest
	isSet bool
}

func (v NullablePutMyPasswordRequest) Get() *PutMyPasswordRequest {
	return v.value
}

func (v *NullablePutMyPasswordRequest) Set(val *PutMyPasswordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutMyPasswordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutMyPasswordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutMyPasswordRequest(val *PutMyPasswordRequest) *NullablePutMyPasswordRequest {
	return &NullablePutMyPasswordRequest{value: val, isSet: true}
}

func (v NullablePutMyPasswordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutMyPasswordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
