/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SoundboardPlayResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SoundboardPlayResponse{}

// SoundboardPlayResponse struct for SoundboardPlayResponse
type SoundboardPlayResponse struct {
	// 作成された Ingress のID
	IngressId string `json:"ingressId"`
	// 作成された Ingress のストリームURL等
	Url *string `json:"url,omitempty"`
	// RTMP配信の場合のstream key
	StreamKey *string `json:"streamKey,omitempty"`
}

type _SoundboardPlayResponse SoundboardPlayResponse

// NewSoundboardPlayResponse instantiates a new SoundboardPlayResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoundboardPlayResponse(ingressId string) *SoundboardPlayResponse {
	this := SoundboardPlayResponse{}
	this.IngressId = ingressId
	return &this
}

// NewSoundboardPlayResponseWithDefaults instantiates a new SoundboardPlayResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoundboardPlayResponseWithDefaults() *SoundboardPlayResponse {
	this := SoundboardPlayResponse{}
	return &this
}

// GetIngressId returns the IngressId field value
func (o *SoundboardPlayResponse) GetIngressId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IngressId
}

// GetIngressIdOk returns a tuple with the IngressId field value
// and a boolean to check if the value has been set.
func (o *SoundboardPlayResponse) GetIngressIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IngressId, true
}

// SetIngressId sets field value
func (o *SoundboardPlayResponse) SetIngressId(v string) {
	o.IngressId = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SoundboardPlayResponse) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoundboardPlayResponse) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SoundboardPlayResponse) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SoundboardPlayResponse) SetUrl(v string) {
	o.Url = &v
}

// GetStreamKey returns the StreamKey field value if set, zero value otherwise.
func (o *SoundboardPlayResponse) GetStreamKey() string {
	if o == nil || IsNil(o.StreamKey) {
		var ret string
		return ret
	}
	return *o.StreamKey
}

// GetStreamKeyOk returns a tuple with the StreamKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoundboardPlayResponse) GetStreamKeyOk() (*string, bool) {
	if o == nil || IsNil(o.StreamKey) {
		return nil, false
	}
	return o.StreamKey, true
}

// HasStreamKey returns a boolean if a field has been set.
func (o *SoundboardPlayResponse) HasStreamKey() bool {
	if o != nil && !IsNil(o.StreamKey) {
		return true
	}

	return false
}

// SetStreamKey gets a reference to the given string and assigns it to the StreamKey field.
func (o *SoundboardPlayResponse) SetStreamKey(v string) {
	o.StreamKey = &v
}

func (o SoundboardPlayResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SoundboardPlayResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ingressId"] = o.IngressId
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.StreamKey) {
		toSerialize["streamKey"] = o.StreamKey
	}
	return toSerialize, nil
}

func (o *SoundboardPlayResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ingressId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSoundboardPlayResponse := _SoundboardPlayResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSoundboardPlayResponse)

	if err != nil {
		return err
	}

	*o = SoundboardPlayResponse(varSoundboardPlayResponse)

	return err
}

type NullableSoundboardPlayResponse struct {
	value *SoundboardPlayResponse
	isSet bool
}

func (v NullableSoundboardPlayResponse) Get() *SoundboardPlayResponse {
	return v.value
}

func (v *NullableSoundboardPlayResponse) Set(val *SoundboardPlayResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSoundboardPlayResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSoundboardPlayResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoundboardPlayResponse(val *SoundboardPlayResponse) *NullableSoundboardPlayResponse {
	return &NullableSoundboardPlayResponse{value: val, isSet: true}
}

func (v NullableSoundboardPlayResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoundboardPlayResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
