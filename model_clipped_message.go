/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ClippedMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClippedMessage{}

// ClippedMessage クリップされたメッセージ
type ClippedMessage struct {
	Message Message `json:"message"`
	// クリップした日時
	ClippedAt time.Time `json:"clippedAt"`
}

type _ClippedMessage ClippedMessage

// NewClippedMessage instantiates a new ClippedMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClippedMessage(message Message, clippedAt time.Time) *ClippedMessage {
	this := ClippedMessage{}
	this.Message = message
	this.ClippedAt = clippedAt
	return &this
}

// NewClippedMessageWithDefaults instantiates a new ClippedMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClippedMessageWithDefaults() *ClippedMessage {
	this := ClippedMessage{}
	return &this
}

// GetMessage returns the Message field value
func (o *ClippedMessage) GetMessage() Message {
	if o == nil {
		var ret Message
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ClippedMessage) GetMessageOk() (*Message, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ClippedMessage) SetMessage(v Message) {
	o.Message = v
}

// GetClippedAt returns the ClippedAt field value
func (o *ClippedMessage) GetClippedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ClippedAt
}

// GetClippedAtOk returns a tuple with the ClippedAt field value
// and a boolean to check if the value has been set.
func (o *ClippedMessage) GetClippedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClippedAt, true
}

// SetClippedAt sets field value
func (o *ClippedMessage) SetClippedAt(v time.Time) {
	o.ClippedAt = v
}

func (o ClippedMessage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClippedMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	toSerialize["clippedAt"] = o.ClippedAt
	return toSerialize, nil
}

func (o *ClippedMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
		"clippedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClippedMessage := _ClippedMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClippedMessage)

	if err != nil {
		return err
	}

	*o = ClippedMessage(varClippedMessage)

	return err
}

type NullableClippedMessage struct {
	value *ClippedMessage
	isSet bool
}

func (v NullableClippedMessage) Get() *ClippedMessage {
	return v.value
}

func (v *NullableClippedMessage) Set(val *ClippedMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableClippedMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableClippedMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClippedMessage(val *ClippedMessage) *NullableClippedMessage {
	return &NullableClippedMessage{value: val, isSet: true}
}

func (v NullableClippedMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClippedMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
