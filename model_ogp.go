/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Ogp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ogp{}

// Ogp OGPの情報
type Ogp struct {
	Type        string     `json:"type"`
	Title       string     `json:"title"`
	Url         string     `json:"url"`
	Images      []OgpMedia `json:"images"`
	Description string     `json:"description"`
	Videos      []OgpMedia `json:"videos"`
}

type _Ogp Ogp

// NewOgp instantiates a new Ogp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOgp(type_ string, title string, url string, images []OgpMedia, description string, videos []OgpMedia) *Ogp {
	this := Ogp{}
	this.Type = type_
	this.Title = title
	this.Url = url
	this.Images = images
	this.Description = description
	this.Videos = videos
	return &this
}

// NewOgpWithDefaults instantiates a new Ogp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOgpWithDefaults() *Ogp {
	this := Ogp{}
	return &this
}

// GetType returns the Type field value
func (o *Ogp) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Ogp) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Ogp) SetType(v string) {
	o.Type = v
}

// GetTitle returns the Title field value
func (o *Ogp) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Ogp) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Ogp) SetTitle(v string) {
	o.Title = v
}

// GetUrl returns the Url field value
func (o *Ogp) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Ogp) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Ogp) SetUrl(v string) {
	o.Url = v
}

// GetImages returns the Images field value
func (o *Ogp) GetImages() []OgpMedia {
	if o == nil {
		var ret []OgpMedia
		return ret
	}

	return o.Images
}

// GetImagesOk returns a tuple with the Images field value
// and a boolean to check if the value has been set.
func (o *Ogp) GetImagesOk() ([]OgpMedia, bool) {
	if o == nil {
		return nil, false
	}
	return o.Images, true
}

// SetImages sets field value
func (o *Ogp) SetImages(v []OgpMedia) {
	o.Images = v
}

// GetDescription returns the Description field value
func (o *Ogp) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Ogp) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Ogp) SetDescription(v string) {
	o.Description = v
}

// GetVideos returns the Videos field value
func (o *Ogp) GetVideos() []OgpMedia {
	if o == nil {
		var ret []OgpMedia
		return ret
	}

	return o.Videos
}

// GetVideosOk returns a tuple with the Videos field value
// and a boolean to check if the value has been set.
func (o *Ogp) GetVideosOk() ([]OgpMedia, bool) {
	if o == nil {
		return nil, false
	}
	return o.Videos, true
}

// SetVideos sets field value
func (o *Ogp) SetVideos(v []OgpMedia) {
	o.Videos = v
}

func (o Ogp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ogp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["title"] = o.Title
	toSerialize["url"] = o.Url
	toSerialize["images"] = o.Images
	toSerialize["description"] = o.Description
	toSerialize["videos"] = o.Videos
	return toSerialize, nil
}

func (o *Ogp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"title",
		"url",
		"images",
		"description",
		"videos",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOgp := _Ogp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOgp)

	if err != nil {
		return err
	}

	*o = Ogp(varOgp)

	return err
}

type NullableOgp struct {
	value *Ogp
	isSet bool
}

func (v NullableOgp) Get() *Ogp {
	return v.value
}

func (v *NullableOgp) Set(val *Ogp) {
	v.value = val
	v.isSet = true
}

func (v NullableOgp) IsSet() bool {
	return v.isSet
}

func (v *NullableOgp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOgp(val *Ogp) *NullableOgp {
	return &NullableOgp{value: val, isSet: true}
}

func (v NullableOgp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOgp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
