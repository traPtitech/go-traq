/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// AddUserGroupMemberRequest - struct for AddUserGroupMemberRequest
type AddUserGroupMemberRequest struct {
	UserGroupMember        *UserGroupMember
	ArrayOfUserGroupMember *[]UserGroupMember
}

// UserGroupMemberAsAddUserGroupMemberRequest is a convenience function that returns UserGroupMember wrapped in AddUserGroupMemberRequest
func UserGroupMemberAsAddUserGroupMemberRequest(v *UserGroupMember) AddUserGroupMemberRequest {
	return AddUserGroupMemberRequest{
		UserGroupMember: v,
	}
}

// []UserGroupMemberAsAddUserGroupMemberRequest is a convenience function that returns []UserGroupMember wrapped in AddUserGroupMemberRequest
func ArrayOfUserGroupMemberAsAddUserGroupMemberRequest(v *[]UserGroupMember) AddUserGroupMemberRequest {
	return AddUserGroupMemberRequest{
		ArrayOfUserGroupMember: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddUserGroupMemberRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UserGroupMember
	err = newStrictDecoder(data).Decode(&dst.UserGroupMember)
	if err == nil {
		jsonUserGroupMember, _ := json.Marshal(dst.UserGroupMember)
		if string(jsonUserGroupMember) == "{}" { // empty struct
			dst.UserGroupMember = nil
		} else {
			if err = validator.Validate(dst.UserGroupMember); err != nil {
				dst.UserGroupMember = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserGroupMember = nil
	}

	// try to unmarshal data into ArrayOfUserGroupMember
	err = newStrictDecoder(data).Decode(&dst.ArrayOfUserGroupMember)
	if err == nil {
		jsonArrayOfUserGroupMember, _ := json.Marshal(dst.ArrayOfUserGroupMember)
		if string(jsonArrayOfUserGroupMember) == "{}" { // empty struct
			dst.ArrayOfUserGroupMember = nil
		} else {
			if err = validator.Validate(dst.ArrayOfUserGroupMember); err != nil {
				dst.ArrayOfUserGroupMember = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfUserGroupMember = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UserGroupMember = nil
		dst.ArrayOfUserGroupMember = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddUserGroupMemberRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddUserGroupMemberRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddUserGroupMemberRequest) MarshalJSON() ([]byte, error) {
	if src.UserGroupMember != nil {
		return json.Marshal(&src.UserGroupMember)
	}

	if src.ArrayOfUserGroupMember != nil {
		return json.Marshal(&src.ArrayOfUserGroupMember)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddUserGroupMemberRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UserGroupMember != nil {
		return obj.UserGroupMember
	}

	if obj.ArrayOfUserGroupMember != nil {
		return obj.ArrayOfUserGroupMember
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj AddUserGroupMemberRequest) GetActualInstanceValue() interface{} {
	if obj.UserGroupMember != nil {
		return *obj.UserGroupMember
	}

	if obj.ArrayOfUserGroupMember != nil {
		return *obj.ArrayOfUserGroupMember
	}

	// all schemas are nil
	return nil
}

type NullableAddUserGroupMemberRequest struct {
	value *AddUserGroupMemberRequest
	isSet bool
}

func (v NullableAddUserGroupMemberRequest) Get() *AddUserGroupMemberRequest {
	return v.value
}

func (v *NullableAddUserGroupMemberRequest) Set(val *AddUserGroupMemberRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddUserGroupMemberRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddUserGroupMemberRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddUserGroupMemberRequest(val *AddUserGroupMemberRequest) *NullableAddUserGroupMemberRequest {
	return &NullableAddUserGroupMemberRequest{value: val, isSet: true}
}

func (v NullableAddUserGroupMemberRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddUserGroupMemberRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
