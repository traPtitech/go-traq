/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PostClientRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostClientRequest{}

// PostClientRequest OAuth2クライアント作成リクエスト
type PostClientRequest struct {
	// クライアント名
	Name string `json:"name"`
	// コールバックURL
	CallbackUrl string `json:"callbackUrl"`
	// 要求スコープの配列
	Scopes []OAuth2Scope `json:"scopes"`
	// 説明
	Description string `json:"description"`
	// confidential client なら true, public cleint なら false
	Confidential *bool `json:"confidential,omitempty"`
}

type _PostClientRequest PostClientRequest

// NewPostClientRequest instantiates a new PostClientRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostClientRequest(name string, callbackUrl string, scopes []OAuth2Scope, description string) *PostClientRequest {
	this := PostClientRequest{}
	this.Name = name
	this.CallbackUrl = callbackUrl
	this.Scopes = scopes
	this.Description = description
	var confidential bool = false
	this.Confidential = &confidential
	return &this
}

// NewPostClientRequestWithDefaults instantiates a new PostClientRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostClientRequestWithDefaults() *PostClientRequest {
	this := PostClientRequest{}
	var confidential bool = false
	this.Confidential = &confidential
	return &this
}

// GetName returns the Name field value
func (o *PostClientRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PostClientRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PostClientRequest) SetName(v string) {
	o.Name = v
}

// GetCallbackUrl returns the CallbackUrl field value
func (o *PostClientRequest) GetCallbackUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value
// and a boolean to check if the value has been set.
func (o *PostClientRequest) GetCallbackUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallbackUrl, true
}

// SetCallbackUrl sets field value
func (o *PostClientRequest) SetCallbackUrl(v string) {
	o.CallbackUrl = v
}

// GetScopes returns the Scopes field value
func (o *PostClientRequest) GetScopes() []OAuth2Scope {
	if o == nil {
		var ret []OAuth2Scope
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
func (o *PostClientRequest) GetScopesOk() ([]OAuth2Scope, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scopes, true
}

// SetScopes sets field value
func (o *PostClientRequest) SetScopes(v []OAuth2Scope) {
	o.Scopes = v
}

// GetDescription returns the Description field value
func (o *PostClientRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *PostClientRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *PostClientRequest) SetDescription(v string) {
	o.Description = v
}

// GetConfidential returns the Confidential field value if set, zero value otherwise.
func (o *PostClientRequest) GetConfidential() bool {
	if o == nil || IsNil(o.Confidential) {
		var ret bool
		return ret
	}
	return *o.Confidential
}

// GetConfidentialOk returns a tuple with the Confidential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostClientRequest) GetConfidentialOk() (*bool, bool) {
	if o == nil || IsNil(o.Confidential) {
		return nil, false
	}
	return o.Confidential, true
}

// HasConfidential returns a boolean if a field has been set.
func (o *PostClientRequest) HasConfidential() bool {
	if o != nil && !IsNil(o.Confidential) {
		return true
	}

	return false
}

// SetConfidential gets a reference to the given bool and assigns it to the Confidential field.
func (o *PostClientRequest) SetConfidential(v bool) {
	o.Confidential = &v
}

func (o PostClientRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostClientRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["callbackUrl"] = o.CallbackUrl
	toSerialize["scopes"] = o.Scopes
	toSerialize["description"] = o.Description
	if !IsNil(o.Confidential) {
		toSerialize["confidential"] = o.Confidential
	}
	return toSerialize, nil
}

func (o *PostClientRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"callbackUrl",
		"scopes",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostClientRequest := _PostClientRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostClientRequest)

	if err != nil {
		return err
	}

	*o = PostClientRequest(varPostClientRequest)

	return err
}

type NullablePostClientRequest struct {
	value *PostClientRequest
	isSet bool
}

func (v NullablePostClientRequest) Get() *PostClientRequest {
	return v.value
}

func (v *NullablePostClientRequest) Set(val *PostClientRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostClientRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostClientRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostClientRequest(val *PostClientRequest) *NullablePostClientRequest {
	return &NullablePostClientRequest{value: val, isSet: true}
}

func (v NullablePostClientRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostClientRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
