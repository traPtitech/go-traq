/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SubscribersChangedEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscribersChangedEvent{}

// SubscribersChangedEvent 購読者変更イベント
type SubscribersChangedEvent struct {
	// 変更者UUID
	UserId string `json:"userId"`
	// オンにされたユーザーのUUID配列
	On []string `json:"on"`
	// オフにされたユーザーのUUID配列
	Off []string `json:"off"`
}

type _SubscribersChangedEvent SubscribersChangedEvent

// NewSubscribersChangedEvent instantiates a new SubscribersChangedEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscribersChangedEvent(userId string, on []string, off []string) *SubscribersChangedEvent {
	this := SubscribersChangedEvent{}
	this.UserId = userId
	this.On = on
	this.Off = off
	return &this
}

// NewSubscribersChangedEventWithDefaults instantiates a new SubscribersChangedEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscribersChangedEventWithDefaults() *SubscribersChangedEvent {
	this := SubscribersChangedEvent{}
	return &this
}

// GetUserId returns the UserId field value
func (o *SubscribersChangedEvent) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *SubscribersChangedEvent) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *SubscribersChangedEvent) SetUserId(v string) {
	o.UserId = v
}

// GetOn returns the On field value
func (o *SubscribersChangedEvent) GetOn() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.On
}

// GetOnOk returns a tuple with the On field value
// and a boolean to check if the value has been set.
func (o *SubscribersChangedEvent) GetOnOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.On, true
}

// SetOn sets field value
func (o *SubscribersChangedEvent) SetOn(v []string) {
	o.On = v
}

// GetOff returns the Off field value
func (o *SubscribersChangedEvent) GetOff() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Off
}

// GetOffOk returns a tuple with the Off field value
// and a boolean to check if the value has been set.
func (o *SubscribersChangedEvent) GetOffOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Off, true
}

// SetOff sets field value
func (o *SubscribersChangedEvent) SetOff(v []string) {
	o.Off = v
}

func (o SubscribersChangedEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscribersChangedEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userId"] = o.UserId
	toSerialize["on"] = o.On
	toSerialize["off"] = o.Off
	return toSerialize, nil
}

func (o *SubscribersChangedEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userId",
		"on",
		"off",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscribersChangedEvent := _SubscribersChangedEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscribersChangedEvent)

	if err != nil {
		return err
	}

	*o = SubscribersChangedEvent(varSubscribersChangedEvent)

	return err
}

type NullableSubscribersChangedEvent struct {
	value *SubscribersChangedEvent
	isSet bool
}

func (v NullableSubscribersChangedEvent) Get() *SubscribersChangedEvent {
	return v.value
}

func (v *NullableSubscribersChangedEvent) Set(val *SubscribersChangedEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscribersChangedEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscribersChangedEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscribersChangedEvent(val *SubscribersChangedEvent) *NullableSubscribersChangedEvent {
	return &NullableSubscribersChangedEvent{value: val, isSet: true}
}

func (v NullableSubscribersChangedEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscribersChangedEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
