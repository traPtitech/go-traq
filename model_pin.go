/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Pin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Pin{}

// Pin ピン情報(メッセージ本体付き)
type Pin struct {
	// ピン留めしたユーザーUUID
	UserId string `json:"userId"`
	// ピン留めされた日時
	PinnedAt time.Time `json:"pinnedAt"`
	Message  Message   `json:"message"`
}

type _Pin Pin

// NewPin instantiates a new Pin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPin(userId string, pinnedAt time.Time, message Message) *Pin {
	this := Pin{}
	this.UserId = userId
	this.PinnedAt = pinnedAt
	this.Message = message
	return &this
}

// NewPinWithDefaults instantiates a new Pin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPinWithDefaults() *Pin {
	this := Pin{}
	return &this
}

// GetUserId returns the UserId field value
func (o *Pin) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *Pin) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *Pin) SetUserId(v string) {
	o.UserId = v
}

// GetPinnedAt returns the PinnedAt field value
func (o *Pin) GetPinnedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.PinnedAt
}

// GetPinnedAtOk returns a tuple with the PinnedAt field value
// and a boolean to check if the value has been set.
func (o *Pin) GetPinnedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PinnedAt, true
}

// SetPinnedAt sets field value
func (o *Pin) SetPinnedAt(v time.Time) {
	o.PinnedAt = v
}

// GetMessage returns the Message field value
func (o *Pin) GetMessage() Message {
	if o == nil {
		var ret Message
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *Pin) GetMessageOk() (*Message, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *Pin) SetMessage(v Message) {
	o.Message = v
}

func (o Pin) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Pin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userId"] = o.UserId
	toSerialize["pinnedAt"] = o.PinnedAt
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *Pin) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userId",
		"pinnedAt",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPin := _Pin{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPin)

	if err != nil {
		return err
	}

	*o = Pin(varPin)

	return err
}

type NullablePin struct {
	value *Pin
	isSet bool
}

func (v NullablePin) Get() *Pin {
	return v.value
}

func (v *NullablePin) Set(val *Pin) {
	v.value = val
	v.isSet = true
}

func (v NullablePin) IsSet() bool {
	return v.isSet
}

func (v *NullablePin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePin(val *Pin) *NullablePin {
	return &NullablePin{value: val, isSet: true}
}

func (v NullablePin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
