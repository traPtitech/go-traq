/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the UserStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserStats{}

// UserStats ユーザー統計情報
type UserStats struct {
	// ユーザーの総投稿メッセージ数(削除されたものも含む)
	TotalMessageCount int64 `json:"totalMessageCount"`
	// ユーザーのスタンプ統計情報
	Stamps []UserStatsStamp `json:"stamps"`
	// 統計情報日時
	Datetime time.Time `json:"datetime"`
}

type _UserStats UserStats

// NewUserStats instantiates a new UserStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserStats(totalMessageCount int64, stamps []UserStatsStamp, datetime time.Time) *UserStats {
	this := UserStats{}
	this.TotalMessageCount = totalMessageCount
	this.Stamps = stamps
	this.Datetime = datetime
	return &this
}

// NewUserStatsWithDefaults instantiates a new UserStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserStatsWithDefaults() *UserStats {
	this := UserStats{}
	return &this
}

// GetTotalMessageCount returns the TotalMessageCount field value
func (o *UserStats) GetTotalMessageCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalMessageCount
}

// GetTotalMessageCountOk returns a tuple with the TotalMessageCount field value
// and a boolean to check if the value has been set.
func (o *UserStats) GetTotalMessageCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalMessageCount, true
}

// SetTotalMessageCount sets field value
func (o *UserStats) SetTotalMessageCount(v int64) {
	o.TotalMessageCount = v
}

// GetStamps returns the Stamps field value
func (o *UserStats) GetStamps() []UserStatsStamp {
	if o == nil {
		var ret []UserStatsStamp
		return ret
	}

	return o.Stamps
}

// GetStampsOk returns a tuple with the Stamps field value
// and a boolean to check if the value has been set.
func (o *UserStats) GetStampsOk() ([]UserStatsStamp, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stamps, true
}

// SetStamps sets field value
func (o *UserStats) SetStamps(v []UserStatsStamp) {
	o.Stamps = v
}

// GetDatetime returns the Datetime field value
func (o *UserStats) GetDatetime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Datetime
}

// GetDatetimeOk returns a tuple with the Datetime field value
// and a boolean to check if the value has been set.
func (o *UserStats) GetDatetimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Datetime, true
}

// SetDatetime sets field value
func (o *UserStats) SetDatetime(v time.Time) {
	o.Datetime = v
}

func (o UserStats) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["totalMessageCount"] = o.TotalMessageCount
	toSerialize["stamps"] = o.Stamps
	toSerialize["datetime"] = o.Datetime
	return toSerialize, nil
}

func (o *UserStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"totalMessageCount",
		"stamps",
		"datetime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserStats := _UserStats{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserStats)

	if err != nil {
		return err
	}

	*o = UserStats(varUserStats)

	return err
}

type NullableUserStats struct {
	value *UserStats
	isSet bool
}

func (v NullableUserStats) Get() *UserStats {
	return v.value
}

func (v *NullableUserStats) Set(val *UserStats) {
	v.value = val
	v.isSet = true
}

func (v NullableUserStats) IsSet() bool {
	return v.isSet
}

func (v *NullableUserStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserStats(val *UserStats) *NullableUserStats {
	return &NullableUserStats{value: val, isSet: true}
}

func (v NullableUserStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
