/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PostMessageStampRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostMessageStampRequest{}

// PostMessageStampRequest スタンプを押すリクエスト
type PostMessageStampRequest struct {
	// 押す数
	Count int32 `json:"count"`
}

type _PostMessageStampRequest PostMessageStampRequest

// NewPostMessageStampRequest instantiates a new PostMessageStampRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostMessageStampRequest(count int32) *PostMessageStampRequest {
	this := PostMessageStampRequest{}
	this.Count = count
	return &this
}

// NewPostMessageStampRequestWithDefaults instantiates a new PostMessageStampRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostMessageStampRequestWithDefaults() *PostMessageStampRequest {
	this := PostMessageStampRequest{}
	return &this
}

// GetCount returns the Count field value
func (o *PostMessageStampRequest) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *PostMessageStampRequest) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *PostMessageStampRequest) SetCount(v int32) {
	o.Count = v
}

func (o PostMessageStampRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostMessageStampRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	return toSerialize, nil
}

func (o *PostMessageStampRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostMessageStampRequest := _PostMessageStampRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostMessageStampRequest)

	if err != nil {
		return err
	}

	*o = PostMessageStampRequest(varPostMessageStampRequest)

	return err
}

type NullablePostMessageStampRequest struct {
	value *PostMessageStampRequest
	isSet bool
}

func (v NullablePostMessageStampRequest) Get() *PostMessageStampRequest {
	return v.value
}

func (v *NullablePostMessageStampRequest) Set(val *PostMessageStampRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostMessageStampRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostMessageStampRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostMessageStampRequest(val *PostMessageStampRequest) *NullablePostMessageStampRequest {
	return &NullablePostMessageStampRequest{value: val, isSet: true}
}

func (v NullablePostMessageStampRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostMessageStampRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
