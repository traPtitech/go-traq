/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// Oauth2ApiService Oauth2Api service
type Oauth2ApiService service

type Oauth2ApiCreateClientRequest struct {
	ctx               context.Context
	ApiService        *Oauth2ApiService
	postClientRequest *PostClientRequest
}

func (r Oauth2ApiCreateClientRequest) PostClientRequest(postClientRequest PostClientRequest) Oauth2ApiCreateClientRequest {
	r.postClientRequest = &postClientRequest
	return r
}

func (r Oauth2ApiCreateClientRequest) Execute() (*OAuth2ClientDetail, *http.Response, error) {
	return r.ApiService.CreateClientExecute(r)
}

/*
CreateClient OAuth2クライアントを作成

OAuth2クライアントを作成します。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return Oauth2ApiCreateClientRequest
*/
func (a *Oauth2ApiService) CreateClient(ctx context.Context) Oauth2ApiCreateClientRequest {
	return Oauth2ApiCreateClientRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return OAuth2ClientDetail
func (a *Oauth2ApiService) CreateClientExecute(r Oauth2ApiCreateClientRequest) (*OAuth2ClientDetail, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OAuth2ClientDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Oauth2ApiService.CreateClient")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/clients"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postClientRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type Oauth2ApiDeleteClientRequest struct {
	ctx        context.Context
	ApiService *Oauth2ApiService
	clientId   string
}

func (r Oauth2ApiDeleteClientRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteClientExecute(r)
}

/*
DeleteClient OAuth2クライアントを削除

指定したOAuth2クライアントを削除します。
対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientId OAuth2クライアントUUID
 @return Oauth2ApiDeleteClientRequest
*/
func (a *Oauth2ApiService) DeleteClient(ctx context.Context, clientId string) Oauth2ApiDeleteClientRequest {
	return Oauth2ApiDeleteClientRequest{
		ApiService: a,
		ctx:        ctx,
		clientId:   clientId,
	}
}

// Execute executes the request
func (a *Oauth2ApiService) DeleteClientExecute(r Oauth2ApiDeleteClientRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Oauth2ApiService.DeleteClient")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/clients/{clientId}"
	localVarPath = strings.Replace(localVarPath, "{"+"clientId"+"}", url.PathEscape(parameterValueToString(r.clientId, "clientId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type Oauth2ApiEditClientRequest struct {
	ctx                context.Context
	ApiService         *Oauth2ApiService
	clientId           string
	patchClientRequest *PatchClientRequest
}

//
func (r Oauth2ApiEditClientRequest) PatchClientRequest(patchClientRequest PatchClientRequest) Oauth2ApiEditClientRequest {
	r.patchClientRequest = &patchClientRequest
	return r
}

func (r Oauth2ApiEditClientRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditClientExecute(r)
}

/*
EditClient OAuth2クライアント情報を変更

指定したOAuth2クライアントの情報を変更します。
対象のクライアントの管理権限が必要です。
クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientId OAuth2クライアントUUID
 @return Oauth2ApiEditClientRequest
*/
func (a *Oauth2ApiService) EditClient(ctx context.Context, clientId string) Oauth2ApiEditClientRequest {
	return Oauth2ApiEditClientRequest{
		ApiService: a,
		ctx:        ctx,
		clientId:   clientId,
	}
}

// Execute executes the request
func (a *Oauth2ApiService) EditClientExecute(r Oauth2ApiEditClientRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Oauth2ApiService.EditClient")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/clients/{clientId}"
	localVarPath = strings.Replace(localVarPath, "{"+"clientId"+"}", url.PathEscape(parameterValueToString(r.clientId, "clientId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchClientRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type Oauth2ApiGetClientRequest struct {
	ctx        context.Context
	ApiService *Oauth2ApiService
	clientId   string
	detail     *bool
}

// 詳細情報を含めるかどうか
func (r Oauth2ApiGetClientRequest) Detail(detail bool) Oauth2ApiGetClientRequest {
	r.detail = &detail
	return r
}

func (r Oauth2ApiGetClientRequest) Execute() (*GetClient200Response, *http.Response, error) {
	return r.ApiService.GetClientExecute(r)
}

/*
GetClient OAuth2クライアント情報を取得

指定したOAuth2クライアントの情報を取得します。
詳細情報の取得には対象のクライアントの管理権限が必要です。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientId OAuth2クライアントUUID
 @return Oauth2ApiGetClientRequest
*/
func (a *Oauth2ApiService) GetClient(ctx context.Context, clientId string) Oauth2ApiGetClientRequest {
	return Oauth2ApiGetClientRequest{
		ApiService: a,
		ctx:        ctx,
		clientId:   clientId,
	}
}

// Execute executes the request
//  @return GetClient200Response
func (a *Oauth2ApiService) GetClientExecute(r Oauth2ApiGetClientRequest) (*GetClient200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetClient200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Oauth2ApiService.GetClient")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/clients/{clientId}"
	localVarPath = strings.Replace(localVarPath, "{"+"clientId"+"}", url.PathEscape(parameterValueToString(r.clientId, "clientId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.detail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "detail", r.detail, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type Oauth2ApiGetClientsRequest struct {
	ctx        context.Context
	ApiService *Oauth2ApiService
	all        *bool
}

// 全てのクライアントを取得するかどうか
func (r Oauth2ApiGetClientsRequest) All(all bool) Oauth2ApiGetClientsRequest {
	r.all = &all
	return r
}

func (r Oauth2ApiGetClientsRequest) Execute() ([]OAuth2Client, *http.Response, error) {
	return r.ApiService.GetClientsExecute(r)
}

/*
GetClients OAuth2クライアントのリストを取得

自身が開発者のOAuth2クライアントのリストを取得します。
`all`が`true`の場合、全開発者の全クライアントのリストを返します。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return Oauth2ApiGetClientsRequest
*/
func (a *Oauth2ApiService) GetClients(ctx context.Context) Oauth2ApiGetClientsRequest {
	return Oauth2ApiGetClientsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return []OAuth2Client
func (a *Oauth2ApiService) GetClientsExecute(r Oauth2ApiGetClientsRequest) ([]OAuth2Client, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []OAuth2Client
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Oauth2ApiService.GetClients")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/clients"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.all != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "all", r.all, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type Oauth2ApiGetMyTokensRequest struct {
	ctx        context.Context
	ApiService *Oauth2ApiService
}

func (r Oauth2ApiGetMyTokensRequest) Execute() ([]ActiveOAuth2Token, *http.Response, error) {
	return r.ApiService.GetMyTokensExecute(r)
}

/*
GetMyTokens 有効トークンのリストを取得

有効な自分に発行されたOAuth2トークンのリストを取得します。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return Oauth2ApiGetMyTokensRequest
*/
func (a *Oauth2ApiService) GetMyTokens(ctx context.Context) Oauth2ApiGetMyTokensRequest {
	return Oauth2ApiGetMyTokensRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return []ActiveOAuth2Token
func (a *Oauth2ApiService) GetMyTokensExecute(r Oauth2ApiGetMyTokensRequest) ([]ActiveOAuth2Token, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ActiveOAuth2Token
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Oauth2ApiService.GetMyTokens")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/me/tokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type Oauth2ApiGetOAuth2AuthorizeRequest struct {
	ctx                 context.Context
	ApiService          *Oauth2ApiService
	clientId            *string
	responseType        *OAuth2ResponseType
	redirectUri         *string
	scope               *string
	state               *string
	codeChallenge       *string
	codeChallengeMethod *string
	nonce               *string
	prompt              *OAuth2Prompt
}

func (r Oauth2ApiGetOAuth2AuthorizeRequest) ClientId(clientId string) Oauth2ApiGetOAuth2AuthorizeRequest {
	r.clientId = &clientId
	return r
}

func (r Oauth2ApiGetOAuth2AuthorizeRequest) ResponseType(responseType OAuth2ResponseType) Oauth2ApiGetOAuth2AuthorizeRequest {
	r.responseType = &responseType
	return r
}

func (r Oauth2ApiGetOAuth2AuthorizeRequest) RedirectUri(redirectUri string) Oauth2ApiGetOAuth2AuthorizeRequest {
	r.redirectUri = &redirectUri
	return r
}

func (r Oauth2ApiGetOAuth2AuthorizeRequest) Scope(scope string) Oauth2ApiGetOAuth2AuthorizeRequest {
	r.scope = &scope
	return r
}

func (r Oauth2ApiGetOAuth2AuthorizeRequest) State(state string) Oauth2ApiGetOAuth2AuthorizeRequest {
	r.state = &state
	return r
}

func (r Oauth2ApiGetOAuth2AuthorizeRequest) CodeChallenge(codeChallenge string) Oauth2ApiGetOAuth2AuthorizeRequest {
	r.codeChallenge = &codeChallenge
	return r
}

func (r Oauth2ApiGetOAuth2AuthorizeRequest) CodeChallengeMethod(codeChallengeMethod string) Oauth2ApiGetOAuth2AuthorizeRequest {
	r.codeChallengeMethod = &codeChallengeMethod
	return r
}

func (r Oauth2ApiGetOAuth2AuthorizeRequest) Nonce(nonce string) Oauth2ApiGetOAuth2AuthorizeRequest {
	r.nonce = &nonce
	return r
}

func (r Oauth2ApiGetOAuth2AuthorizeRequest) Prompt(prompt OAuth2Prompt) Oauth2ApiGetOAuth2AuthorizeRequest {
	r.prompt = &prompt
	return r
}

func (r Oauth2ApiGetOAuth2AuthorizeRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetOAuth2AuthorizeExecute(r)
}

/*
GetOAuth2Authorize OAuth2 認可エンドポイント

OAuth2 認可エンドポイント

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return Oauth2ApiGetOAuth2AuthorizeRequest
*/
func (a *Oauth2ApiService) GetOAuth2Authorize(ctx context.Context) Oauth2ApiGetOAuth2AuthorizeRequest {
	return Oauth2ApiGetOAuth2AuthorizeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *Oauth2ApiService) GetOAuth2AuthorizeExecute(r Oauth2ApiGetOAuth2AuthorizeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Oauth2ApiService.GetOAuth2Authorize")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth2/authorize"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	if r.responseType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "response_type", r.responseType, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "client_id", r.clientId, "")
	if r.redirectUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "redirect_uri", r.redirectUri, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "")
	}
	if r.codeChallenge != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code_challenge", r.codeChallenge, "")
	}
	if r.codeChallengeMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code_challenge_method", r.codeChallengeMethod, "")
	}
	if r.nonce != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nonce", r.nonce, "")
	}
	if r.prompt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prompt", r.prompt, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type Oauth2ApiPostOAuth2AuthorizeRequest struct {
	ctx                 context.Context
	ApiService          *Oauth2ApiService
	clientId            *string
	responseType        *OAuth2ResponseType
	redirectUri         *string
	scope               *string
	state               *string
	codeChallenge       *string
	codeChallengeMethod *string
	nonce               *string
	prompt              *OAuth2Prompt
}

func (r Oauth2ApiPostOAuth2AuthorizeRequest) ClientId(clientId string) Oauth2ApiPostOAuth2AuthorizeRequest {
	r.clientId = &clientId
	return r
}

func (r Oauth2ApiPostOAuth2AuthorizeRequest) ResponseType(responseType OAuth2ResponseType) Oauth2ApiPostOAuth2AuthorizeRequest {
	r.responseType = &responseType
	return r
}

func (r Oauth2ApiPostOAuth2AuthorizeRequest) RedirectUri(redirectUri string) Oauth2ApiPostOAuth2AuthorizeRequest {
	r.redirectUri = &redirectUri
	return r
}

func (r Oauth2ApiPostOAuth2AuthorizeRequest) Scope(scope string) Oauth2ApiPostOAuth2AuthorizeRequest {
	r.scope = &scope
	return r
}

func (r Oauth2ApiPostOAuth2AuthorizeRequest) State(state string) Oauth2ApiPostOAuth2AuthorizeRequest {
	r.state = &state
	return r
}

func (r Oauth2ApiPostOAuth2AuthorizeRequest) CodeChallenge(codeChallenge string) Oauth2ApiPostOAuth2AuthorizeRequest {
	r.codeChallenge = &codeChallenge
	return r
}

func (r Oauth2ApiPostOAuth2AuthorizeRequest) CodeChallengeMethod(codeChallengeMethod string) Oauth2ApiPostOAuth2AuthorizeRequest {
	r.codeChallengeMethod = &codeChallengeMethod
	return r
}

func (r Oauth2ApiPostOAuth2AuthorizeRequest) Nonce(nonce string) Oauth2ApiPostOAuth2AuthorizeRequest {
	r.nonce = &nonce
	return r
}

func (r Oauth2ApiPostOAuth2AuthorizeRequest) Prompt(prompt OAuth2Prompt) Oauth2ApiPostOAuth2AuthorizeRequest {
	r.prompt = &prompt
	return r
}

func (r Oauth2ApiPostOAuth2AuthorizeRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostOAuth2AuthorizeExecute(r)
}

/*
PostOAuth2Authorize OAuth2 認可エンドポイント

OAuth2 認可エンドポイント

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return Oauth2ApiPostOAuth2AuthorizeRequest
*/
func (a *Oauth2ApiService) PostOAuth2Authorize(ctx context.Context) Oauth2ApiPostOAuth2AuthorizeRequest {
	return Oauth2ApiPostOAuth2AuthorizeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *Oauth2ApiService) PostOAuth2AuthorizeExecute(r Oauth2ApiPostOAuth2AuthorizeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Oauth2ApiService.PostOAuth2Authorize")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth2/authorize"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.responseType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "response_type", r.responseType, "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "client_id", r.clientId, "")
	if r.redirectUri != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "redirect_uri", r.redirectUri, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "scope", r.scope, "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "state", r.state, "")
	}
	if r.codeChallenge != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "code_challenge", r.codeChallenge, "")
	}
	if r.codeChallengeMethod != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "code_challenge_method", r.codeChallengeMethod, "")
	}
	if r.nonce != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "nonce", r.nonce, "")
	}
	if r.prompt != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "prompt", r.prompt, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type Oauth2ApiPostOAuth2AuthorizeDecideRequest struct {
	ctx        context.Context
	ApiService *Oauth2ApiService
	submit     *string
}

// 承諾する場合は\\\&quot;approve\\\&quot;
func (r Oauth2ApiPostOAuth2AuthorizeDecideRequest) Submit(submit string) Oauth2ApiPostOAuth2AuthorizeDecideRequest {
	r.submit = &submit
	return r
}

func (r Oauth2ApiPostOAuth2AuthorizeDecideRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostOAuth2AuthorizeDecideExecute(r)
}

/*
PostOAuth2AuthorizeDecide OAuth2 認可承諾API

OAuth2 認可承諾

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return Oauth2ApiPostOAuth2AuthorizeDecideRequest
*/
func (a *Oauth2ApiService) PostOAuth2AuthorizeDecide(ctx context.Context) Oauth2ApiPostOAuth2AuthorizeDecideRequest {
	return Oauth2ApiPostOAuth2AuthorizeDecideRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *Oauth2ApiService) PostOAuth2AuthorizeDecideExecute(r Oauth2ApiPostOAuth2AuthorizeDecideRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Oauth2ApiService.PostOAuth2AuthorizeDecide")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth2/authorize/decide"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.submit == nil {
		return nil, reportError("submit is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "submit", r.submit, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type Oauth2ApiPostOAuth2TokenRequest struct {
	ctx          context.Context
	ApiService   *Oauth2ApiService
	grantType    *string
	code         *string
	redirectUri  *string
	clientId     *string
	codeVerifier *string
	username     *string
	password     *string
	scope        *string
	refreshToken *string
	clientSecret *string
}

func (r Oauth2ApiPostOAuth2TokenRequest) GrantType(grantType string) Oauth2ApiPostOAuth2TokenRequest {
	r.grantType = &grantType
	return r
}

func (r Oauth2ApiPostOAuth2TokenRequest) Code(code string) Oauth2ApiPostOAuth2TokenRequest {
	r.code = &code
	return r
}

func (r Oauth2ApiPostOAuth2TokenRequest) RedirectUri(redirectUri string) Oauth2ApiPostOAuth2TokenRequest {
	r.redirectUri = &redirectUri
	return r
}

func (r Oauth2ApiPostOAuth2TokenRequest) ClientId(clientId string) Oauth2ApiPostOAuth2TokenRequest {
	r.clientId = &clientId
	return r
}

func (r Oauth2ApiPostOAuth2TokenRequest) CodeVerifier(codeVerifier string) Oauth2ApiPostOAuth2TokenRequest {
	r.codeVerifier = &codeVerifier
	return r
}

func (r Oauth2ApiPostOAuth2TokenRequest) Username(username string) Oauth2ApiPostOAuth2TokenRequest {
	r.username = &username
	return r
}

func (r Oauth2ApiPostOAuth2TokenRequest) Password(password string) Oauth2ApiPostOAuth2TokenRequest {
	r.password = &password
	return r
}

func (r Oauth2ApiPostOAuth2TokenRequest) Scope(scope string) Oauth2ApiPostOAuth2TokenRequest {
	r.scope = &scope
	return r
}

func (r Oauth2ApiPostOAuth2TokenRequest) RefreshToken(refreshToken string) Oauth2ApiPostOAuth2TokenRequest {
	r.refreshToken = &refreshToken
	return r
}

func (r Oauth2ApiPostOAuth2TokenRequest) ClientSecret(clientSecret string) Oauth2ApiPostOAuth2TokenRequest {
	r.clientSecret = &clientSecret
	return r
}

func (r Oauth2ApiPostOAuth2TokenRequest) Execute() (*OAuth2Token, *http.Response, error) {
	return r.ApiService.PostOAuth2TokenExecute(r)
}

/*
PostOAuth2Token OAuth2 トークンエンドポイント

OAuth2 トークンエンドポイント

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return Oauth2ApiPostOAuth2TokenRequest
*/
func (a *Oauth2ApiService) PostOAuth2Token(ctx context.Context) Oauth2ApiPostOAuth2TokenRequest {
	return Oauth2ApiPostOAuth2TokenRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return OAuth2Token
func (a *Oauth2ApiService) PostOAuth2TokenExecute(r Oauth2ApiPostOAuth2TokenRequest) (*OAuth2Token, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OAuth2Token
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Oauth2ApiService.PostOAuth2Token")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth2/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.grantType == nil {
		return localVarReturnValue, nil, reportError("grantType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "grant_type", r.grantType, "")
	if r.code != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "code", r.code, "")
	}
	if r.redirectUri != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "redirect_uri", r.redirectUri, "")
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "client_id", r.clientId, "")
	}
	if r.codeVerifier != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "code_verifier", r.codeVerifier, "")
	}
	if r.username != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "username", r.username, "")
	}
	if r.password != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "password", r.password, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "scope", r.scope, "")
	}
	if r.refreshToken != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "refresh_token", r.refreshToken, "")
	}
	if r.clientSecret != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "client_secret", r.clientSecret, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type Oauth2ApiRevokeMyTokenRequest struct {
	ctx        context.Context
	ApiService *Oauth2ApiService
	tokenId    string
}

func (r Oauth2ApiRevokeMyTokenRequest) Execute() (*http.Response, error) {
	return r.ApiService.RevokeMyTokenExecute(r)
}

/*
RevokeMyToken トークンの認可を取り消す

自分の指定したトークンの認可を取り消します。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tokenId OAuth2トークンUUID
 @return Oauth2ApiRevokeMyTokenRequest
*/
func (a *Oauth2ApiService) RevokeMyToken(ctx context.Context, tokenId string) Oauth2ApiRevokeMyTokenRequest {
	return Oauth2ApiRevokeMyTokenRequest{
		ApiService: a,
		ctx:        ctx,
		tokenId:    tokenId,
	}
}

// Execute executes the request
func (a *Oauth2ApiService) RevokeMyTokenExecute(r Oauth2ApiRevokeMyTokenRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Oauth2ApiService.RevokeMyToken")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/me/tokens/{tokenId}"
	localVarPath = strings.Replace(localVarPath, "{"+"tokenId"+"}", url.PathEscape(parameterValueToString(r.tokenId, "tokenId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type Oauth2ApiRevokeOAuth2TokenRequest struct {
	ctx        context.Context
	ApiService *Oauth2ApiService
	token      *string
}

// 無効化するOAuth2トークンまたはOAuth2リフレッシュトークン
func (r Oauth2ApiRevokeOAuth2TokenRequest) Token(token string) Oauth2ApiRevokeOAuth2TokenRequest {
	r.token = &token
	return r
}

func (r Oauth2ApiRevokeOAuth2TokenRequest) Execute() (*http.Response, error) {
	return r.ApiService.RevokeOAuth2TokenExecute(r)
}

/*
RevokeOAuth2Token OAuth2 トークン無効化エンドポイント

OAuth2 トークン無効化エンドポイント

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return Oauth2ApiRevokeOAuth2TokenRequest
*/
func (a *Oauth2ApiService) RevokeOAuth2Token(ctx context.Context) Oauth2ApiRevokeOAuth2TokenRequest {
	return Oauth2ApiRevokeOAuth2TokenRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *Oauth2ApiService) RevokeOAuth2TokenExecute(r Oauth2ApiRevokeOAuth2TokenRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Oauth2ApiService.RevokeOAuth2Token")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth2/revoke"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return nil, reportError("token is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "token", r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
