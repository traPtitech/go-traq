/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"encoding/json"
	"time"
)

// MessageStamp メッセージに押されたスタンプ
type MessageStamp struct {
	// ユーザーUUID
	UserId string `json:"userId"`
	// スタンプUUID
	StampId string `json:"stampId"`
	// スタンプ数
	Count int32 `json:"count"`
	// スタンプが最初に押された日時
	CreatedAt time.Time `json:"createdAt"`
	// スタンプが最後に押された日時
	UpdatedAt time.Time `json:"updatedAt"`
}

// NewMessageStamp instantiates a new MessageStamp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageStamp(userId string, stampId string, count int32, createdAt time.Time, updatedAt time.Time) *MessageStamp {
	this := MessageStamp{}
	this.UserId = userId
	this.StampId = stampId
	this.Count = count
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewMessageStampWithDefaults instantiates a new MessageStamp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageStampWithDefaults() *MessageStamp {
	this := MessageStamp{}
	return &this
}

// GetUserId returns the UserId field value
func (o *MessageStamp) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *MessageStamp) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *MessageStamp) SetUserId(v string) {
	o.UserId = v
}

// GetStampId returns the StampId field value
func (o *MessageStamp) GetStampId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StampId
}

// GetStampIdOk returns a tuple with the StampId field value
// and a boolean to check if the value has been set.
func (o *MessageStamp) GetStampIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StampId, true
}

// SetStampId sets field value
func (o *MessageStamp) SetStampId(v string) {
	o.StampId = v
}

// GetCount returns the Count field value
func (o *MessageStamp) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *MessageStamp) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *MessageStamp) SetCount(v int32) {
	o.Count = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *MessageStamp) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *MessageStamp) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *MessageStamp) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *MessageStamp) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *MessageStamp) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *MessageStamp) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o MessageStamp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["userId"] = o.UserId
	}
	if true {
		toSerialize["stampId"] = o.StampId
	}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if true {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableMessageStamp struct {
	value *MessageStamp
	isSet bool
}

func (v NullableMessageStamp) Get() *MessageStamp {
	return v.value
}

func (v *NullableMessageStamp) Set(val *MessageStamp) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageStamp) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageStamp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageStamp(val *MessageStamp) *NullableMessageStamp {
	return &NullableMessageStamp{value: val, isSet: true}
}

func (v NullableMessageStamp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageStamp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
