/*
traQ v3

traQ v3 API

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traq

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GetBot200Response - struct for GetBot200Response
type GetBot200Response struct {
	Bot       *Bot
	BotDetail *BotDetail
}

// BotAsGetBot200Response is a convenience function that returns Bot wrapped in GetBot200Response
func BotAsGetBot200Response(v *Bot) GetBot200Response {
	return GetBot200Response{
		Bot: v,
	}
}

// BotDetailAsGetBot200Response is a convenience function that returns BotDetail wrapped in GetBot200Response
func BotDetailAsGetBot200Response(v *BotDetail) GetBot200Response {
	return GetBot200Response{
		BotDetail: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetBot200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Bot
	err = newStrictDecoder(data).Decode(&dst.Bot)
	if err == nil {
		jsonBot, _ := json.Marshal(dst.Bot)
		if string(jsonBot) == "{}" { // empty struct
			dst.Bot = nil
		} else {
			if err = validator.Validate(dst.Bot); err != nil {
				dst.Bot = nil
			} else {
				match++
			}
		}
	} else {
		dst.Bot = nil
	}

	// try to unmarshal data into BotDetail
	err = newStrictDecoder(data).Decode(&dst.BotDetail)
	if err == nil {
		jsonBotDetail, _ := json.Marshal(dst.BotDetail)
		if string(jsonBotDetail) == "{}" { // empty struct
			dst.BotDetail = nil
		} else {
			if err = validator.Validate(dst.BotDetail); err != nil {
				dst.BotDetail = nil
			} else {
				match++
			}
		}
	} else {
		dst.BotDetail = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Bot = nil
		dst.BotDetail = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetBot200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetBot200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetBot200Response) MarshalJSON() ([]byte, error) {
	if src.Bot != nil {
		return json.Marshal(&src.Bot)
	}

	if src.BotDetail != nil {
		return json.Marshal(&src.BotDetail)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetBot200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Bot != nil {
		return obj.Bot
	}

	if obj.BotDetail != nil {
		return obj.BotDetail
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GetBot200Response) GetActualInstanceValue() interface{} {
	if obj.Bot != nil {
		return *obj.Bot
	}

	if obj.BotDetail != nil {
		return *obj.BotDetail
	}

	// all schemas are nil
	return nil
}

type NullableGetBot200Response struct {
	value *GetBot200Response
	isSet bool
}

func (v NullableGetBot200Response) Get() *GetBot200Response {
	return v.value
}

func (v *NullableGetBot200Response) Set(val *GetBot200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetBot200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetBot200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetBot200Response(val *GetBot200Response) *NullableGetBot200Response {
	return &NullableGetBot200Response{value: val, isSet: true}
}

func (v NullableGetBot200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetBot200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
